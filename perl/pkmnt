#!/usr/bin/perl
use strict; use warnings; $\ = "\n";

# Issue Tracker:
# * current option processing allows 's' and '-long'

my $Author    = 'Nico Pareigis';
my ($Program) = $0 =~ m{^.*/(.+)$};
my $Version   = '0.0.5';

my $LUpType = 'i';
my $LUpDir  = '/dev/disk/';
use constant BYID     => 'by-id/';
use constant BYUUID   => 'by-uuid/';
use constant PROCMNT  => '/proc/mounts';
use constant XDGCONF  => $ENV{XDG_CONFIG_HOME}.'/';


my ($Clean, $UsbOnly) = ('f') x 2;
my ($Dev, $Uuid)      = ('')  x 2;
my $Part  = 1;
my $MTime = 0;

my ($Mnt, $FMnt)      = ('f') x 2;
my $UMnt              = 't';
my ($MntPoint, $DbF)  = ('')  x 2;

my %Opts = (
  b => 'blockdev', f => 'forceunmount', h => 'help',
  n => 'noumount', p => 'partition',    u => 'uuid'
);
my %RequiresArg = (
  b => 'blockdev', p => 'partition', u => 'uuid'
);


my sub Clean {
  if ($Dev and (($Mnt eq 'f' and $UMnt eq 't') or $FMnt eq 't')) {
    `udisksctl unmount -b $Dev` or
      print STDERR $Program.': improper termination - '.$Dev.' still mounted!';
  }
}
my sub Err {
  print STDERR "$Program: $_[1]";
  Clean()     if $Clean eq 't';
  exit($_[0]) if $_[0] > 0;
}
my sub SigHandler { local $_ = shift;
  Err(  1, 'illegal argument - '.shift)             if /^ArgErr$/;
  Err(  1, 'not enough arguments for '.shift)       if /^NumErr$/;
  Err(  2, shift.' doesn\'t exist.')                if /^DevErr$/;
  Err(  2, 'uuid not found - '.shift)               if /^UuidErr$/;
  Err(  2, 'udisks2 mount failure.')                if /^UMErr$/;
  Err(  2, 'udisks2 unmount failure.')              if /^UUErr$/;
  Err(  3, 'no valid database found.')              if /^DbEErr$/;
  Err(  3, 'file ('.shift.') doesn\'t exist.')      if /^DbFErr$/;
  Err(  3, 'keepass fatal.')                        if /^KeeErr$/;
  Err(  7, 'couldn\'t close dirhandle for '.shift)  if /^DCErr$/;
  Err(  7, 'couldn\'t open dirhandle for '.shift)   if /^DOErr$/;
  Err(  7, 'couldn\'t close filehandle for '.shift) if /^FCErr$/;
  Err(  7, 'couldn\'t open filehandle for '.shift)  if /^FOErr$/;
  Err(  7, 'dependency not met - '.shift)           if /^DepErr$/; 
  Err(130, 'caught interrupt.')                     if /^SigInt$/;
} $SIG{INT} = sub { SigHandler('SigInt'); };

my sub Help {
chomp(my $H = <<"EOF");
NAME
    $Program - mount partition -> open KeePass database -> unmount partition

SYNOPSIS
    $Program [OPTS] [-- PATH]

DESCRIPTION
    perl-keepass-mount ($Program) can be used to quickly and conveniently access
    a KeePass database.
    Unless already mounted, the partition the database resides on will be auto-
    mounted in userspace via udisks2. If the disk was not mounted initially, it
    will automatically be unmounted after KeePass exits (see -n and -f flags).

    PATH may be used to specify a relative or absolute database path in the
    host filesystem, OR a path relative to the partition's mount point. For the
    latter, do NOT use leading path separators.

    $Program looks at the 'LastUsedFile/Path' node in \$XDG_CONFIG_HOME/KeePass/
    KeePass.config.xml to determine the database file. This is either done using
    a XPath location path, or a regex, depending on whether XML::LibXML is
    installed or not.

    The resulting path is then iteratively matched against a valid filename
    beneath the mount point. As a last resort, $Program will look for any *.kdbx
    files directly below the mount point and settle for the first one.

OPTIONS
    -b | --blockdev DEV
        Use DEV as the block device to mount, instead of the one that was most
        recently mounted. DEV is assumed to reside in /dev.
        (also see -u)

    -f | --force-unmount
        $Program usually doesn't unmount partitions that were already mounted
        when the script is run. With this option, $Program will always try to
        unmount the partition holding the database.
        (also see -n)

    -h | --help
        Print this help information and exit.

    -n | --no-unmount
        Never try to unmount partition after KeePass exits, even if it wasn't
        mounted initially.
        (also see -f)
  
    -o | --only-usb
        Only consider devices beginning with 'usb-' (see '/dev/disk/by-id/'
        filename structure) when auto-detecting device and partition.
        (ignored by -u)

    -p | --partition INT
        Use INT as the partition number the database resides on.
        (ignored by -u)

    -u | --uuid UUID
        Use UUID (NOT part-UUID) as the partition's UUID.
        (also see -b, ignores -o and -p)

EXIT STATUS
      0, on success
      1, on argument error
      2, on mount error
      3, on database|keepass error
      7, on miscellaneous error
    130, on keyboard interrupt

DEPENDENCIES
    XML::LibXML (optional, used to grab database path if present)

    keepass     (any)
    udisks2     (tested with v.2.9.4-1)

VERSION
    $Version

AUTHOR
    $Author
EOF
; print $H; exit(0);
}


# Dependency checks:
my @Deps = ('keepass', 'udisksctl'); my @MDeps;
foreach my $Dep (@Deps) {
  my $Installed;
  foreach my $Dir (split(':', $ENV{PATH})) {
    $Dir .= '/' if $Dir !~ /\/$/;
    -f $Dir.$Dep and do { $Installed = 1; last; };
  }
  push(@MDeps, $Dep) unless $Installed;
}
SigHandler('DepErr', join(', ', @MDeps)) if @MDeps;


# Switch parsing:
while (local $_ = shift) {
  my $X = $_; s/-//g;
  unless($X eq '--') {
    # SigHandler('ArgErr', $X) if not $_ ~~ [keys %Opts, values %Opts];
    ($Opts{$_} or grep($_ eq $X, values %Opts)) or SigHandler('ArgErr', $X);
    SigHandler('NumErr', $X) if $RequiresArg{$_} and not @ARGV;
  }

  if (/^h|help$/) {
    Help();
  }
  elsif (/^b|blockdev$/) {
    local $_ = shift;
    SigHandler('ArgErr', $_) if not /^[a-z\d]+$/;
    $Dev = $_;
  }
  elsif (/^f|forceunmount$/) {
    $FMnt = 't';
  }
  elsif (/^n|nounmount$/) {
    $UMnt = 'f';
  }
  elsif (/^o|onlyusb$/) {
    $UsbOnly = 't';
  }
  elsif (/^p|partition$/) {
    local $_ = shift;
    SigHandler('ArgErr', $_) if not /^\d+$/;
    $Part = $_;
  }
  elsif (/^u|uuid$/) {
    $LUpType = 'u';
    $Uuid = shift;
  }
  elsif (/^$/) {
    $DbF = join(' ', @ARGV) if @ARGV; last;
  }
}


unless ($Dev) {
  # Set appropriate lookup directory:
  if    ($LUpType eq 'i') { $LUpDir .= BYID; }
  elsif ($LUpType eq 'u') { $LUpDir .= BYUUID; }

  opendir(DH, $LUpDir) or SigHandler('DOErr', $LUpDir);
    local @_ = readdir DH; splice(@_, 0, 2);
  closedir(DH) or die SigHandler('DCErr', $LUpDir);

  if ($LUpType eq 'i') {
      # Get newest connected disk and relevant partition:
      foreach (@_) {
        next if /-part\d+$/ or ($UsbOnly eq 't' and not /^usb-/);
        if ($MTime < (lstat $LUpDir.$_)[9]) {
          (readlink $LUpDir.$_) =~ /([a-z0-9]*)$/;
          $Dev  = '/dev/'.$1;
          $Dev .= 'p' if /^nvme/;
          $Dev .= $Part;
          $MTime  = (stat _)[9];
          # Speed up processing with large number of devices:
          last if time - $MTime < 10;
        }
      }
  }
  elsif ($LUpType = 'u') {
    foreach (@_) {
      if (/^$Uuid$/i) {
        (readlink $LUpDir.$_) =~ /([a-z0-9]*)$/;
        $Dev = '/dev/'.$1; last;
      }
    }
    SigHandler('UuidErr', $Uuid) if not $Dev;
  }
} else {
  $Dev = '/dev/'.$Dev.$Part;
}
SigHandler('DevErr', $Dev) if not -b $Dev;


# Check mountpoint:
open(FH, '<', PROCMNT) or SigHandler('FOErr', PROCMNT);
  while (<FH>) {
    local @_ = split(' ');
    if ($_[0] eq $Dev) {
      $Mnt      = 't';
      $MntPoint = $_[1];
    }
  }
close(FH) or SigHandler('FCErr', PROCMNT);

# Mount partition if necessary:
if ($Mnt eq 't') {
  print $Dev.' already mounted ('.$MntPoint.') - opening database.';
  $UMnt = 'f';
}
else {
  `udisksctl mount -b $Dev 2>/dev/null` =~ /^Mounted $Dev at (.*)$/
    or SigHandler('UMErr');
  $MntPoint = $1;
  $Clean = 't';
}


# Try to find database:
local $_;
XDGCONF and $_ = XDGCONF or $_ = $ENV{HOME}.'/.config/';
my $KpConf = $_.'KeePass/KeePass.config.xml';

if ($DbF) { # Got '-- PATH'
  $DbF = $MntPoint.'/'.$DbF   if $DbF !~ /^(?:\.)\//;

  # Throw error when passed invalid path:
  SigHandler('DbFErr', $DbF)  if not -e $DbF;
}
else {      # Didn't get '-- PATH'
  undef local $/;
  my ($Config, $Path) = ('') x 2;

  # Try KeePass.config.xml's LastUsedFile:
  if (-f $KpConf) {
    open(FH, '<', $KpConf) or SigHandler('FOErr', $KpConf);
      $Config = <FH>;
    close(FH) or SigHandler('FCErr', $KpConf);
  }

  # Determine database path:
  eval 'use XML::LibXML';
  if (not $@) {
    $Path = XML::LibXML->load_xml(string => $Config)->find('//LastUsedFile/Path');
  } else {
    ($Path) = $Config =~ m{<LastUsedFile>\n\s*<Path>(.*)</Path>};
  }
  $Path =~ s/^(?:\.{1,2}\/)*//;
  undef $Config;

  # Iteratively try to match partial filename to existing database:
  if ($Path) {
    local @_  = split('/', $Path);
    my $Try   = '';
    foreach (reverse @_) {
      $Try = '/'.$_.$Try;
      -f $MntPoint.$Try and do { $DbF = $MntPoint.$Try; last; };
    }
  }

  # Last ditch effort - try '$MntPoint/*.kdbx':
  if (not $DbF) {
    opendir(DH, $MntPoint) or SigHandler('DOErr', $MntPoint);
      local @_ = readdir DH;
    closedir(DH) or SigHandler('DCErr', $MntPoint);
    do { /^.*\.kdbx$/ and $DbF = $MntPoint.$_; last; } foreach @_;
  }
}
SigHandler('DbEErr') if not $DbF;


# Open database:
`keepass $DbF`;
$? == 0 or SigHandler('KeeErr');

# Unmount partition if needed:
if ($FMnt eq 't' or $UMnt eq 't') {
  `udisksctl unmount -b $Dev` or SigHandler('UUErr')
}
