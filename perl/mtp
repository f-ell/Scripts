#!/usr/bin/perl
use warnings; use strict;
use feature 'current_sub';
use experimental 'smartmatch';
$" = ', ';

# TODO:
# * misc
#   * print summary only when more than one package/class was tested
# * options
#   * group test classes and failed tests in single object
#   * fail control
#   * offline mode
#   * omit / only tally

my $author    = 'Nico Pareigis';
my ($program) = $0 =~ m{^.*/(.+)$};
my $version   = '0.1.1';

my %OPTS = ( colour => 1, error => 1, json => 0, json_pretty => 0, quiet => 0, silent => 0 );
my %JSON = ();
my $TEST = '-Dtest=';
my ($PACKAGE, $CLASS) = ('')x2;

my sub err($$) { # exit_code, message
  printf STDERR "$program: %s\n", $_[1];
  exit($_[0]) if $_[0] > 0;
}

my sub mvn($$$) { # exit_code, severity, message
  my $sev = uc $_[1];
  printf STDOUT "[%s] %s\n", $OPTS{colour} ? colored($sev, $sev) : $sev, $_[2];
  exit($_[0]) if $_[0] > 0;
}

my sub json {
  print JSON::PP->new->pretty($OPTS{json_pretty})->encode(\%JSON);
  exit $JSON{maven}{exitCode};
}

my sub help {
  print <<~EOF
  NAME
      $program - `mvn test` parser

  SYNOPSIS
      $program [OPTS] [TESTSPEC]

  DESCRIPTION
      $program parses maven's `test` output in an effort to reduce clutter and
      visual noise, whilst improving the readability of test results. To achieve
      this, a not insignificant portion of the output is discarded, parts of
      which may be deemed vital by some users (e.g. stack traces).

      Before execution, $program walks up the directory tree, looking for a
      maven project root (i.e. pom.xml, also see -r) at each level. If it finds
      one, maven is run in that directory.

      TESTSPEC can be used to only run specific test classes and/or methods.
      The spec is passed to maven's `-Dtest=`-option and should conform to its
      syntax (see https://maven.apache.org/surefire/maven-surefire-plugin/examples/single-test.html).

  OPTIONS
      -e | --no-errors
          Exclude failed test methods and reasons from the test summary. Does
          not affect JSON output.

      -h | --help
          Print help information and exit.

      -j | --json
          Output test data in JSON format, requires JSON::PP to be installed.

      -n | --no-colour
          Disable coloured output, makes Term::ANSIColor an optional dependency.

      -p | --prettify-json
          Output JSON data in prettified format, implies -j.

      -q | --quiet
          Suppress detailed results for individual test classes. Does not
          suppress current package and class name or summary (see -s).

      -r | --root DIR|FILE
          Run maven in another directory or with a different project file.

      -s | --silent
          Suppress detailed results for individual test classes as well as
          current package and class names. Does not suppress summary (see -q).

      -v | --version
          Print version information and exit.

  EXIT STATUS
      0, on success.
      1, on argument, dependency, or filesystem error.
      2, on fatal maven error.

  DEPENDENCIES
      External:
      mvn

      Modules:
      Cwd
      JSON::PP        (required with -j)
      Term::ANSIColor (optional with -j, -n)

  VERSION
      $version

  AUTHOR(S)
      $author
  EOF
  ; exit 0;
}

my sub version {
  printf "%s %s %s\n", $program, $version, $author;
  exit 0;
}

my sub mvn_avail {
  my $exec = 0;
  foreach (split ':', $ENV{PATH}) {
    chop if m{/$};
    if (not -d $_.'/mvn' and -x _) { $exec = 1; last; }
  }
  err 1, 'mvn executable not found in $PATH' unless $exec;
}

my sub mod_avail {
  my @missing = ();
  my @mods = (
    { mod => 'Cwd', args => 'qw(chdir)' },
    { mod => 'JSON::PP', cond => $OPTS{json} },
    { mod => 'Term::ANSIColor',
      cond => $OPTS{colour},
      args => '4.00 qw(color colored coloralias)',
      cb => sub {
        Term::ANSIColor::coloralias('INF', 'bold blue');
        Term::ANSIColor::coloralias('ERR', 'bold red');
        Term::ANSIColor::coloralias('WAR', 'bold yellow');
      }
    }
  );

  foreach (@mods) {
    next if ($_->{cond} // 1) == 0 or (@_ and not $_->{mod} ~~ @_);
    eval "use $_->{mod} ".($_->{args} // '');
    $@ ? push @missing, $_->{mod} : (defined $_->{cb} and $_->{cb}());
  }

  err 1, "dependency not met - @missing" if @missing;
}

my sub dep_check {
  mvn_avail();
  mod_avail();
}

my sub validate_root($) {
  my $root = shift;
  if (-d $root) {
    $root =~ s{/$}{};
    not -f $root.'/pom.xml' and err 1, 'target directory does not contain pom.xml';
    $JSON{maven}{rootDirectory} = Cwd::abs_path($root);
  } elsif (-f $root) {
    $root =~ s{/?([^/]+?)$}{};
    $JSON{maven}{rootFile} = $1;
    $JSON{maven}{rootDirectory} = Cwd::abs_path($root || '.');
  } else {
    err 1, "target '$root' not found"
  }
}

my sub find_mvn_root_rec($) { local $_ = shift;
  if (m{^/$}) {
    if ($OPTS{json}) {
      $JSON{maven}{rootDirectory} = undef;
      $JSON{maven}{exitCode} = 2;
      json();
    } else {
      mvn 2, 'ERR', 'Fatal: No maven root found';
    }
  }

  opendir DH, $_ or err 1, "failed to open dirhandle '$_'";
    return $_ if grep /^$JSON{maven}{rootFile}$/, readdir DH;
  closedir DH or err 1, "failed to close dirhandle '$_'";

  __SUB__->(Cwd::abs_path($_.'/..'));
}

my sub find_mvn_root {
  $JSON{maven}{rootFile} //= 'pom.xml';
  $JSON{maven}{rootDirectory} //= find_mvn_root_rec(Cwd::getcwd());
}

my sub parse_package($$) {
  mvn 0, 'INF', 'Testing package '.$_[0] if not ($OPTS{json} or $OPTS{silent}) and $_[0] ne $PACKAGE;
  ($PACKAGE, $CLASS) = (shift, shift);
  mvn 0, 'INF', 'Running '.$CLASS if not ($OPTS{json} or $OPTS{silent});
}

my sub parse_tests($$) {
  mvn 0, substr($1, 0, 3), $CLASS.' results:' if not ($OPTS{json} or $OPTS{quiet});
  $2 =~ /^(\d+), Failures: (\d+), Errors: (\d+), Skipped: (\d+)/;

  my @keys = ( 'tests', 'fail', 'error', 'skip' );
  # HACK: black magic ahead
  no strict 'refs';
  foreach (0..$#keys) {
    $JSON{testResults}{$PACKAGE}{$CLASS}{$keys[$_]} = ${$_+1};
    $JSON{testResults}{tally}{$keys[$_]} += ${$_+1};
  }
  use strict;

  if (not ($OPTS{json} or $OPTS{quiet})) {
    print '  Ran     : ', $1, "\n";
    print '  Passed  : ', ($1 - $2 - $3), "\n";
    print '  Failed  : ', $2, "\n";
    print '  Errored : ', $3, "\n";
    print '  Skipped : ', $4, "\n";
  }
}

my sub parse_errors($) {
  my $FH = shift;

  my sub duplicate($$$) {
    my ($class, $method, $reason) = (shift, shift, shift);
    foreach (@{$JSON{testResults}{$PACKAGE}{failedTests}{$class}}) {
      return 1 if $method eq $_->{method} and $reason eq $_->{reason};
    }
    return 0;
  }

  while (local $_ = <$FH>) {
    last if /^\[INFO\]/;
    /^\[ERROR\]\s+(?:(.+?)\.)(.+?)(?::\d+)?\s+(.*)$/;
    push @{$JSON{testResults}{$PACKAGE}{failedTests}{$1 // 'unknownClass'}},
      { method => $2 // 'unknownMethod', reason => $3 // '' } if not duplicate($1, $2, $3);
  }
}

my sub summary {
  my %total = %{$JSON{testResults}{tally}
    // {tests => 0, fail => 0, error => 0, skip => 0}};
  mvn 0, 'INF', 'Summary';
  mvn 0, $total{fail} + $total{error} == 0 ? 'INF' : 'ERR', 'Test summary:';
  print '  Ran     : ', $total{tests}, "\n";
  print '  Passed  : ', $total{tests} - $total{fail} - $total{error}, "\n";
  print '  Failed  : ', $total{fail}, "\n";
  print '  Errored : ', $total{error}, "\n";
  print '  Skipped : ', $total{skip}, "\n";

  if ($OPTS{error}) {
    my %results = %{$JSON{testResults}};
    foreach (sort keys %results) { # packages
      my %package = %{$results{$_}};
      next if /^tally$/ or not $package{failedTests};

      mvn 0, 'ERR', 'Failed tests ('.$_.'):';
      foreach (sort keys %{$package{failedTests}}) { # classes
        my $class = $_;
        print '  ', $class, ' -> ', $_->{method},
          ($_->{reason} and " ('", $_->{reason}, "')"), "\n"
          foreach @{$package{failedTests}{$class}};
      }
    }
  }

  my $sev = $JSON{maven}{buildStatus} =~ /^SUCCESS$/ ? 'INF' : 'ERR';
  mvn 0, $sev, 'Build '.lc $JSON{maven}{buildStatus};
  mvn 0, 'INF', 'Time taken: '.$JSON{maven}{totalTime};
}

# option processing
while (local $_ = shift) {
  if (/^(?:-e|--no-errors)$/) {
    $OPTS{error} = 0;
  }
  elsif (/^(?:-h|--help)$/) {
    help();
  }
  elsif (/^(?:-j|--json)$/) {
    $OPTS{colour} = 0;
    $OPTS{json} = 1;
  }
  elsif (/^(?:-n|--no-colour)$/) {
    $OPTS{colour} = 0;
  }
  elsif (/^(?:-p|--prettify-json)$/) {
    $OPTS{colour} = 0;
    $OPTS{json} = 1;
    $OPTS{json_pretty} = 1;
  }
  elsif (/^(?:-q|--quiet)$/) {
    $OPTS{quiet} = 1;
  }
  elsif (/^(?:-r|--root)$/) {
    # TODO: find a better way to detect options
    my @OPTS = ( '-h', '--help', '-j', '--json', '-n', '--no-colour',
      '-p', '--prettify-json', '-r', '--root', '-v', '--version' );
    err 1, "missing argument for '$_'" if not @ARGV or $ARGV[0] ~~ @OPTS;
    mod_avail('Cwd');
    validate_root(shift);
  }
  elsif (/^(?:-s|--silent)$/) {
    $OPTS{quiet} = 1;
    $OPTS{silent} = 1;
  }
  elsif (/^(?:-v|--version)$/) {
    version();
  }
  elsif (/^-{1,2}\w+/) {
    err 1, 'illegal argument - '.$_;
  }
  elsif (/^--$/) {
    $TEST .= shift if @ARGV; last;
  }
  else {
    $TEST .= $_; last;
  }
}

# preliminary checks
dep_check();
find_mvn_root();

$JSON{maven}{javaHome} = $ENV{JAVA_HOME} // undef;

# parse test output
open my $FH, '-|', "mvn test -f $JSON{maven}{rootDirectory}/$JSON{maven}{rootFile} $TEST 2>&1"
    or err 1, 'failed to spawn mvn';
  while (<$FH>) {
    if ($. == 1 and /JAVA_HOME/) {
      err 1, 'invalid JAVA_HOME - '.$JSON{maven}{javaHome} // '';
    } elsif ($. == 1 and not $OPTS{json}) {
      mvn 0, 'INF', 'Found maven root at '.$JSON{maven}{rootDirectory};
    }

    next unless /^\[\w+\]/;

    parse_package($1, $2) if /^\[INFO\] Running ([\w.]+)\.(\w+)$/;
    parse_tests($1, $2)   if /^\[(\w+)\] Tests run: (.*), Time elapsed:/;
    parse_errors($FH)     if /^\[ERROR\] (?:Errors|Failures):/;

    $JSON{maven}{buildStatus} = $1 if /^\[INFO\] BUILD (\w+)$/;
    $JSON{maven}{totalTime}   = $1 if /^\[INFO\] Total time:\s+(.*)$/;
  }
  summary() if not $OPTS{json};
close $FH or $? = $? == 256 ? 1 : $?;
$JSON{maven}{exitCode} = $?;

$OPTS{json}
  ? json()
  : do {
    mvn $JSON{maven}{exitCode}, 'ERR',
    'Fatal: maven returned non-zero exit status'
      if $JSON{maven}{exitCode} > 0;
  };
