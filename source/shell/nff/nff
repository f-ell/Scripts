#!/bin/sh
# * add option to overwrite default $FuzzyOpts

Authors='Nico Pareigis'
Program=${0##*/}
Version=0.3.4

Usage() {
printf "NAME
    $Program - (Neo)Vim-Fuzzy-Finder - find file in filesystem and open it with
    Vi, Vim, or NeoVim

SYNOPSIS
    $Program [OPTS] [DIR] [-- EXP]

DESCRIPTION
    Recursively search through directories and select one or more files. The sel-
    ected file(s) will be opened in either Vi, Vim, or NeoVim (ascending prior-
    ity). Optionally, specify a search directory and/or expression to be matched.

    DIR specifies the directory to run $Program in; the default is \$HOME.

    '-- EXP' allows the user to specify multiple search expressions/filenames as
    a space-separated list. If $Program finds a file matching the expression,
    the file is added to a list that will be opened in the editor. If a match
    only has a single candidate, this is done automatically. Otherwise fzf,
    fzy, or zf (descending priority) is used to interactively select a match.

    When using fzf for fuzzy finding, part of the user's \$FZF_DEFAULT_OPTS may
    temporarily be overwritten.

    NOTE:
    Due to shell limitations, expressions / filenames containing spaces are
    currently unsupported and should not be used!

OPTIONS
    -d, --depth INT
      Takes a positive, non-zero integer and uses it as the search depth. A high
      search depth may include more / better results, but can significantly in-
      crease script runtime.
      Default search depth is 10.

    -E, --editor
      Uses \$EDITOR instead of the internally calculated editor.

    -f, -zf
      Use zf for fuzzy finding.

    -g, --no-git-ignore
      $Program excludes any file / directory matching '.git*' that it encounters
      during the search. Using this option prevents those matches from being re-
      moved from search results.
      Can be used in combination with patterns, specified either in a separate
      file, or on the command line (see -e and -p respectively), to only show
      specific git-related results.

    -i, --ignore FILE
      Use FILE containing patterns to ignore files and directories in search re-
      esults. Patterns support globbing characters and should be separated by
      newlines. Avoid prefixing patterns with '**/', as that's how they are
      being matched internally and prefixing them as such would prevent exclu-
      sion of all files / directories that are first-hand children of DIR.
      Furthermore, patterns should consist of the shortest, unambiguous part of
      the filenames / directories one wishes to exclude.

      By default $Program tries to source a file named 'exclude.nff', located in
      the script's directory, to filter unwanted search results. If one wants to
      not exclude any results, ensure a file with aforementioned name does not
      exist in the script's directory, or pass '-' as FILE to this option.

      EXAMPLE:
      Assume the contents of '/path/to/first/directory/' are to be discarded but
      contents of '/path/to/second/directory/' are to be kept as search results.
      To achieve this, put 'first/directory' in the pattern file. Alternatively,
      if anything matching 'directory' is to be discarded just put 'directory'
      in the pattern file.

      This repository ships a very minimal 'exclude.nff' that can be built upon.

    -l
      Include symlinked files in search results (traverses symlinks).

    -p, --pattern PATTERN
      Use PATTERN to exclude files / directories from being matched. Can be used
      more than once.
      See -e for an example on proper PATTERN formatting.

    -v, --version
      Output version information and exit.

    -y, --fzy
      Use fzy for fuzzy finding.

    -z, --fzf
      Use fzf for fuzzy finding.

EXIT STATUS
      0, on success.
      1, on option error.
      2, when no file is found. Most likely caused by a poor EXP and/or a
         shallow search depth.
      3, on dependency error.
    130, on keyboard interrupt.

DEPENDENCIES
    Coreutils:
    wc                (any)

    Other:
    fd                (v8.3.2+)
    fzf | fzy | zf    (v0.30.0+ | v1.0+ | v0.5+)
    vi  | vim | nvim  (any, optional with -E)

VERSION
    $Version

AUTHOR(S)
    $Authors\n"
}


unset VerWrn FnfWrn DptErr DepErr DirErr IgnErr SigInt
SigHandler() {
  [ "$VerWrn" = 1 ] && Err   0 "'$1' version ($2) is outdated and may not work."
  [ "$FnfWrn" = 1 ] && Err   0 "'$1' not found - skipping."
  [ "$DptErr" = 1 ] && Err   1 "depth has to be a positive, non-zero integer."
  [ "$DirErr" = 1 ] && Err   1 "directory '$1' does not exist."
  [ "$IgnErr" = 1 ] && Err   1 "file '$1' doesn't exist, isn't a valid file, or doesn't have read permissions."
  [ "$FilErr" = 1 ] && Err   2 'no valid file provided.'
  [ "$DepErr" = 1 ] && Err   3 "dependency not met - $1."
  [ "$SigInt" = 1 ] && Err 130 "keyboard interrupt."
}


### Helper functions
Err() {
  printf '%s: %s\n' "$Program" "$2" 1>&2
  [ $1 -gt 0 ] && exit $1
}
DepAllOf() { # all of $@ are present
  for Dep in "$@"; do
    if ! command -v $Dep 1>/dev/null; then
      MissingDepCount=$((MissingDepCount+1))
      MissingDeps="$MissingDeps, $Dep"
    fi
  done
}
DepAnyOf() { # any of $@ is present
  for Dep in "$@"; do
    if command -v $Dep 1>/dev/null; then
      Return=$Dep
      return 0
    fi
  done
  MissingDepCount=$((MissingDepCount+1))
}

GetEditor() { # determine editor
  DepAnyOf nvim vim vi
  [ -z $Return ] && MissingDeps="$MissingDeps, vi | (n)vim" \
    || Editor=$Return
  unset Return
}
GetFuzzy() {  # determine fuzzy finder
  DepAnyOf fzf fzy zf
  [ -z $Return ] && MissingDeps="$MissingDeps, fzf | fzy | zf" \
    || Fuzzy=$Return
  unset Return
}

CheckSemanticVersion() {
  Dep=$1; CurVer=$2; MinVer=$3
  Major=${CurVer%%.*}
  Minor=${CurVer#*.}; Minor=${Minor%.*}
  Patch=${CurVer##*.}
  [ $Major$Minor$Patch -lt $MinVer ] && VerWrn=1 SigHandler $Dep $CurVer
  unset Dep CurVer MinVer Major Minor Patch
}
CheckMajorMinorVersion() {
  Dep=$1; CurVer=$2; MinVer=$3
  Major=${CurVer%.*}
  Minor=${CurVer#*.}
  [ $Major$Minor -lt $MinVer ] && VerWrn=1 SigHandler $Dep $CurVer
  unset Dep CurVer MinVer
}

FdVC() { # fd version check
  Ver=`fd --version`
  CheckSemanticVersion 'fd' ${Ver#fd } 832
  unset Ver
}
FzfVC() { # fzf version check
  Ver=`fzf --version`
  CheckSemanticVersion 'fzf' ${Ver% *} 0300
  unset Ver
}
FzyVC() { # fzy version check
  Ver=`fzy --version`; Ver=${Ver#fzy }
  CheckMajorMinorVersion 'fzy' ${Ver% Â©*} 10
  unset Ver
}
ZfVC() {  # zf version check
  Ver=`zf --version`; Ver=${Ver#zf }; Ver=${Ver%% *}

  # compatibility with zf versions between 0.1.0 and 0.6.0
  Compat=${Ver#*.}; Compat=${Compat%.*}
  [ $Compat -gt 0 -a $Compat -le 5 ] \
    && CheckMajorMinorVersion 'zf' $Ver 05 || CheckSemanticVersion 'zf' $Ver 060

  unset Ver Compat
}

### Argument processing
Editor=''
Fuzzy=''
FzfOpts='-i -e --tiebreak=begin --reverse --prompt= --height=10 --no-color --no-info'
FzyOpts='--lines=10 --prompt='
ZfOpts='--lines 10'
Depth=10
Dir="$HOME"
IgnoreFile="${0%/*}/exclude.nff"
ExcludePattern=''
Exp='. / '
ExpList=''
GitIgnore='**/.git*,'
Link=''

while [ -n "$1" ]; do
  case "$1" in
    --)
      shift
      for Exp in "$@"; do
        [ "$ExpList" = "${ExpList%"$Exp"*}" ] && ExpList="$ExpList$Exp / "
      done
      break;;

    -h|--help)
      Usage; exit 0;;

    -d|--depth)
      if [ $2 -eq $2 ] 2>/dev/null && [ $2 -gt 0 ]; then
        Depth=$2
      else
        DptErr=1 SigHandler
      fi
      shift 2;;

    -E|--editor)
      Editor="$EDITOR"
      shift;;

    -i|--ignore)
      if [ "$2" = - ]; then
        unset IgnoreFile
      else
        [ ! -f "$2" -o ! -r "$2" ] && IgnErr=1 SigHandler "$2"
        IgnoreFile="$2"
      fi
      shift 2;;

    -f|--zf)
      Fuzzy=zf
      shift;;

    -g|--no-git-ignore)
      unset GitIgnore
      shift;;

    -l)
      Link=L
      shift;;

    -p|--pattern)
      Pattern=${2%/}
      ExcludePattern="$ExcludePattern**/${Pattern#*/},"
      unset Pattern
      shift 2;;

    -v|--version)
      printf "$Program $Version $Authors\n";
      exit 0;;

    -y|--fzy)
      Fuzzy=fzy
      shift;;

    -z|--fzf)
      Fuzzy=fzf
      shift;;

    -*)
      Err 1 "invalid option - '$1'.";;

    *)
      [ ! -d "$1" ] && DirErr=1 SigHandler "$1"
      Dir="$1"
      shift;;
  esac
done


### Dependency checks
MissingDepCount=0; MissingDeps='';
DepAllOf wc fd

# set editor and fuzzy finder if not implied by arguments
[ -z $Editor ]  && GetEditor
[ -z $Fuzzy ]   && GetFuzzy

[ $MissingDepCount -gt 0 ] && DepErr=1 SigHandler "${MissingDeps#, }"
unset Dep MissingDeps MissingDepCount


### Version checks
FdVC

if [ $Fuzzy = fzf ]; then
  FzfVC; FuzzyOpts="$FzfOpts"
elif [ $Fuzzy = fzy ]; then
  FzyVC; FuzzyOpts="$FzyOpts"
else [ $Fuzzy = zf ]
  ZfVC; FuzzyOpts="$ZfOpts"
fi


### Execution
# Construct $ExcludeList
if [ -n "$GitIgnore" -o -n "$ExcludePattern" -o -n "$IgnoreFile" ]; then
  ExcludeList='-E {'

  [ -n "$GitIgnore" ]       && ExcludeList="$ExcludeList$GitIgnore"
  [ -n "$ExcludePattern" ]  && ExcludeList="$ExcludeList$ExcludePattern"

  if [ -n "$IgnoreFile" ]; then
    while IFS='' read -r File; do
      File=${File%/}
      ExcludeList="$ExcludeList**/${File#*/},"
    done < "$IgnoreFile"
  fi

  ExcludeList="$ExcludeList}"
  unset ExcludePattern IgnoreFile
fi


# Construct $Files string
SingleMatch=1
Files=''
FdCmd="fd $ExcludeList -tf -H$Link -d$Depth -p"

[ -z "$ExpList" ] && ExpList="$Exp"
while [ -n "$ExpList" ]; do
  # Emulate fzf's '-1' behaviour for other finders
  [ `$FdCmd --max-results 2 -- "${ExpList%% / *}" "$Dir" | wc -l` -gt 1 ] \
    && SingleMatch=0

  if [ $SingleMatch -eq 0 ]; then
    Match=`$FdCmd -- "${ExpList%% / *}" "$Dir" | $Fuzzy $FuzzyOpts`
  else
    Match=`$FdCmd -- "${ExpList%% / *}" "$Dir"`
  fi

  X=$?
  if [ $X -ne 0 ]; then
    [ $Fuzzy = fzf -a $X -eq 130 ]  && SigInt=1 SigHandler
    [ $X -eq 1 ]                    && SigInt=1 SigHandler
    Err 2 'uncaught fuzzy finder error.'
  fi
  unset X

  [ -n "$Match" ] && Files="$Files$Match " \
    || FnfWrn=1 SigHandler ${ExpList%% / *}

  [ "$ExpList" = "$Exp" ] && break

  ExpList="${ExpList#* / }"
done; Files="${Files% }"


# Open editor
[ -n "$Files" ] && $Editor $Files || FnfErr=1 SigHandler
