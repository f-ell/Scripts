#!/usr/bin/bash

# TODO:
# * exclude patterns in J_EXCLUDE
# * fuzzy finder from J_FUZZY

program='j'
author='Nico Pareigis'
version='0.0.4'

TMPDIR="/tmp/$USER"
TMPSRC="$TMPDIR/j_src"

function err {
  printf '%s: %s\n' "$program" "$2" 1>&2
  (( $1 > 0 )) && exit $1
}

function sighandler {
  (( ${tmp_store-0} == 1 )) && err 0 "warning - failed writing jump information to '$1'"
  (( ${tmp_read-0} == 1 ))  && err 2 'could not read jump information'
  (( ${tmp_exist-0} == 1 )) && err 2 'no jump information available'
  (( ${dir-0} == 1 ))       && err 2 "could not create directory '$1'"
  (( ${dep-0} == 1 ))       && err 3 "dependency not met - $1"
  (( ${int-0} == 1 ))       && err 130 'interrupt'

  (( ${arg-0} == 1 )) && err 1 "unrecognized option - $1"
  (( ${optarg-0} == 1 )) && err 1 "invalid argument for option '$1' - $2"
  (( ${optmis-0} == 1 )) && err 1 "missing argument for option '$1'"
  (( ${result-0} == 1 )) && err 2 'no matches found'
}

function usage {
  while read; do
    printf "$REPLY\n"
  done <<-EOF
	NAME
	    $program - find and jump directly to child-directories

	SYNOPSIS
	    $program [<options>] [<pattern>...]

	DESCRIPTION
	    $program uses \`fd\` to find jump candidates.
	    <pattern> may be any regex understood by \`fd\`, which uses smart-case
	    matching by default. Keep this in mind when defining patterns containing
	    capitals.

	    If there is more than one jump candidate, the user may select the desired
	    target using a fuzzy finder / external program of their choice (see
	    OPTIONS and ENVIRONMENT VARIABLES below).

	    Before jumping, $program stores jump information in /tmp/\$USER, which can
	    later be used to jump to the last invocation directory or jump target.

	OPTIONS
	    -a | --all
	        Include hidden directories in search results.

	    -b | --back
	        Jump back to the directory $program was last invoked from.

	    -d | --depth <int>
	        Set \`fd\` search depth to <int>, default is 8.
	        <int> should be a positive, non-zero integer.

	    -f | --zf
	        Use \`zf\` for fuzzy-finding.
	        Requires \`zf\` to be installed and available in \$PATH.

	    -l | --follow-links
	        Include symlinked directories in search results.

	    -y | --fzy
	        Use \`fzy\` for fuzzy-finding.
	        Requires \`fzy\` to be installed and available in \$PATH.

	    -z | --fzf
	        Use \`fzf\` for fuzzy-finding.
	        Requires \`fzf\` to be installed and available in \$PATH.

	        $program is not designed to handle \`fzf\`'s multi-selection feature.
	        Usage may result in unexpected behaviour.

	ENVIRONMENT VARIABLES
	    <TO BE IMPLEMENTED>

	EXIT STATUS
	      1, on argument error
	      2, when no matches are found / missing jump information
	      3, on dependency error
	    130, on keyboard interrupt

	DEPENDENCIES
	    Coreutils:
	        realpath

	    Other:
	        fd
	        fzf | fzy | zf (any, depending on arguments / \$J_FUZZY)

	VERSION
	    $version

	AUTHOR(S)
	    $author
	EOF
}

function arginvalid {
  # FIX: ensure $1 isn't a valid option
  [[ -z $1 || $1 == -- ]]
}

function dep {
  declare -a missing

  for dep in "$@"; do
    if ! command -v $dep 1>/dev/null; then
      missing+=($dep)
    fi
  done

  declare deps="${missing[@]}"
  ((${#missing[@]} > 0)) && dep=1 sighandler "${deps// /, }"
}

function proc {
  while [[ -n $@ ]]; do
    case "$1" in
      -a|--all)
        opts[hidden]='-H'
        shift;;
      -b|--back)
        jump_back
        shift;;
      -d|--depth)
        declare arg=$1
        shift
        arginvalid "$1" && optmis=1 sighandler $arg
        [[ $1 =~ ^[[:digit:]]+$ ]] && (( $1 > 0 )) || optarg=1 sighandler $arg $1
        opts[depth]=$1
        shift;;
      -f|--zf)
        opts[fuzzy]='zf'
        shift;;
      -h|--help)
        usage
        exit 0;;
      -l|--follow-links)
        opts[links]='-L'
        shift;;
      -v|--version)
        err 5 'not implemented yet';;
      -y|--fzy)
        opts[fuzzy]='fzy'
        shift;;
      -z|--fzf)
        opts[fuzzy]='fzf'
        shift;;
      -*)
        [[ $1 != -- ]] && arg=1 sighandler $1;&
      --|*)
        [[ $1 == -- ]] && shift
        patterns+=($@)
        break;;
    esac
  done
}

# ----------------------------------------------------------

function jump {
  store_jump_info "$1"
  printf "cd \"$1\"\n"
}

function jump_back {
  [[ ! -f $TMPSRC ]] && tmp_exist=1 sighandler $TMPSRC
  [[ ! -r $TMPSRC ]] && tmp_read=1 sighandler $TMPSRC

  read < $TMPSRC
  printf "cd \"$REPLY\"\n"

  exit 0
}

function jump_or_query {
  (( ${#@} == 1 )) && jump "$1" || query $@
}

function query {
  declare dir=`printf "%s\n" $@ | ${opts[fuzzy]}`
  [[ -z $dir ]] && int=1 sighandler

  store_jump_info "$dir"
  printf "cd \"$dir\"\n"
}

function store_jump_info {
  [[ ! -d "$TMPDIR" ]] && { mkdir "$TMPDIR" || dir=1 sighandler "$TMPDIR"; }
  printf "$PWD\n" 1> "$TMPSRC" || tmp_store=1 sighandler "$TMPSRC"
}

# execution
declare -A opts=(
  [depth]=8
  [fuzzy]='fzf'
  [hidden]=
  [links]=
)
declare -a patterns

proc $@
dep realpath fd ${opts[fuzzy]}

IFS='|'
declare fd=`fd -d${opts[depth]} -td ${opts[hidden]} ${opts[links]} -- "${patterns[*]}"`
unset IFS
declare -a matches=(${fd//$'\n'/ })

(( ${#matches[@]} == 0 )) && result=1 sighandler

jump_or_query ${matches[@]}

exit 0
