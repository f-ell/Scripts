#!/usr/bin/bash

program='j'
author='Nico Pareigis'
version='0.0.8'

TMPDIR="/tmp/$USER"
TMPSRC="$TMPDIR/j_src"
TMPDEST="$TMPDIR/j_dest"

function err {
  printf '%s: %s\n' "$program" "$2" 1>&2
  (( $1 > 0 )) && exit $1
}

function sighandler {
  (( ${tmp_store:-0} == 1 )) && err 0 "warning - failed writing jump information to '$1'"
  (( ${tmp_read:-0} == 1 ))  && err 2 'could not read jump information'
  (( ${tmp_exist:-0} == 1 )) && err 2 'no jump information available'
  (( ${dir:-0} == 1 ))       && err 2 "could not create directory '$1'"
  (( ${dep:-0} == 1 ))       && err 7 "dependency not met - $1"
  (( ${int:-0} == 1 ))       && err 130 'interrupt'

  (( ${arg:-0} == 1 )) && err 1 "unrecognized option - $1"
  (( ${optarg:-0} == 1 )) && err 1 "invalid argument for option '$1' - $2"
  (( ${optmis:-0} == 1 )) && err 1 "missing argument for option '$1'"
  (( ${result:-0} == 1 )) && err 2 'no matches found'
}

function usage {
  while read; do
    printf "$REPLY\n"
  done <<-EOF
	NAME
	    $program - find and jump directly to child-directories

	SYNOPSIS
	    $program [<options>] [<pattern>...]

	DESCRIPTION
	    $program uses \`fd\` to find jump candidates.
	    <pattern> may be any regex understood by \`fd\`, which uses smart-case
	    matching by default. Keep this in mind when defining patterns containing
	    capitals.

	    If there is more than one jump candidate, the user may select the desired
	    target using a fuzzy finder / external program of their choice (see
	    OPTIONS and ENVIRONMENT VARIABLES below).

	    Before jumping, $program stores jump information in "/tmp/\$USER", which can
	    later be used to jump to the last invocation directory or jump target.

	OPTIONS
	    -a | --all
	        Include hidden directories in search results.

	    -d | --depth <int>
	        Set \`fd\` search depth to <int>, default is 8.
	        <int> should be a positive, non-zero integer.

	    -f | --zf
	        Use \`zf\` for fuzzy-finding.
	        Requires \`zf\` to be installed and available in PATH.

	    -h | --help
	        Print this help information and exit.

	    -l | --follow-links
	        Include symlinked directories in search results.

	    -s | --source
	        Jump to the source directory of $program's last invocation (i.e. PWD
	        $program was last called from). Reads jump information from
	        "/tmp/\$USER/${TMPSRC##*/}".

	    -t | --target
	        Jump to the target directory of $program's last invocation. Reads jump
	        information from "/tmp/\$USER/${TMPDEST##*/}".

	    -v | --version
	        Print version information and exit.

	    -y | --fzy
	        Use \`fzy\` for fuzzy-finding.
	        Requires \`fzy\` to be installed and available in PATH.

	    -z | --fzf
	        Use \`fzf\` for fuzzy-finding.
	        Requires \`fzf\` to be installed and available in PATH.

	        $program is not designed to handle \`fzf\`'s multi-selection feature.
	        Usage may result in unexpected behaviour.

	ENVIRONMENT VARIABLES
	    J_EXCLUDE
	        Can be a colon-separated list (similar to PATH) of glob-patterns to
	        exclude from search results (passed to \`fd\`'s '-E' option).

	    J_FUZZY
	        Can be used to specify a fuzzy-finder program other than the natively
	        supported ones.

	        The program needs to be executable and
	          a) be available in PATH, or
	          b) specified as an absolute or relative path.

	        It should read the jump candidates as a newline separated list from
	        STDIN and return any single entry / line, which will be used as the
	        jump target.

	EXIT STATUS
	      1, on argument error
	      2, when no matches are found / missing jump information
	      7, on dependency error
	    130, on keyboard interrupt

	DEPENDENCIES
	    Coreutils:
	        realpath

	    Other:
	        fd
	        fzf | fzy | zf (optional, depending on arguments / J_FUZZY)

	VERSION
	    $version

	AUTHOR(S)
	    $author
	EOF
}

function version {
  printf "$program $version $author\n"
}

# ----------------------------------------------------------

function arginvalid {
  # FIX: ensure $1 isn't a valid option
  [[ -z $1 || $1 == -- ]]
}

function dep {
  declare -a missing

  for dep in "$@"; do
    if ! command -v $dep 1>/dev/null; then
      missing+=($dep)
    fi
  done

  declare deps="${missing[@]}"
  ((${#missing[@]} > 0)) && dep=1 sighandler "${deps// /, }"
}

function make_exclude {
  declare e
  IFS=':'
  for e in $J_EXCLUDE; do
    [[ -z $e ]] && continue
    exclude+=(-E$e)
  done
}

function proc {
  while [[ -n $@ ]]; do
    case "$1" in
      -a|--all)
        opts[hidden]='-H'
        shift;;
      -d|--depth)
        declare arg=$1
        shift
        arginvalid "$1" && optmis=1 sighandler $arg
        [[ $1 =~ ^[[:digit:]]+$ ]] && (( $1 > 0 )) || optarg=1 sighandler $arg $1
        opts[depth]=$1
        shift;;
      -f|--zf)
        opts[fuzzy]='zf'
        shift;;
      -h|--help)
        usage
        exit 0;;
      -l|--follow-links)
        opts[links]='-L'
        shift;;
      -s|--source)
        _jump "$TMPSRC"
        shift;;
      -t|--target)
        _jump "$TMPDEST"
        shift;;
      -v|--version)
        version
        exit 0;;
      -y|--fzy)
        opts[fuzzy]='fzy'
        shift;;
      -z|--fzf)
        opts[fuzzy]='fzf'
        shift;;
      -*)
        [[ $1 != -- ]] && arg=1 sighandler $1;&
      --|*)
        [[ $1 == -- ]] && shift
        patterns+=($@)
        break;;
    esac
  done
}

# ----------------------------------------------------------

function jump {
  if (( ${1:-0} == 1 )); then
    [[ ! -d "$TMPDIR" ]] && { mkdir "$TMPDIR" || dir=1 sighandler "$TMPDIR"; }

    printf "$PWD\n" 1> "$TMPSRC"\
      || tmp_store=1 sighandler "$TMPSRC"
    printf "%s\n" `realpath $2` 1> "$TMPDEST"\
      || tmp_store=1 sighandler "$TMPDEST"
  fi

  printf "cd \"$2\"\n"
  exit 0
}

function _jump {
  [[ ! -f "$1" ]] && tmp_exist=1 sighandler "$1"
  [[ ! -r "$1" ]] && tmp_read=1 sighandler "$1"

  jump 0 `< $1`
}

# ----------------------------------------------------------

declare -A opts=(
  [depth]=8
  [fuzzy]="${J_FUZZY:-fzf}"
  [hidden]=
  [links]=
)
declare -a exclude matches patterns

proc $@
dep realpath fd ${opts[fuzzy]}

make_exclude

IFS='|'
declare fd=`fd -d${opts[depth]} -td ${opts[hidden]} ${opts[links]} ${exclude[@]} -- "${patterns[*]}"`

IFS=$'\n'
for dir in $fd; do
  matches+=($dir)
done

(( ${#matches[@]} == 0 )) && result=1 sighandler
(( ${#matches[@]} == 1 )) && dir="${matches[0]}" || {
  dir=`printf "%s\n" ${matches[@]} | ${opts[fuzzy]}`
  [[ -z $dir ]] && int=1 sighandler
}

jump 1 "$dir"
