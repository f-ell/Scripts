#!/usr/bin/perl
use warnings; use strict; $\ = "\n";
# NOTE: As of 28/09/2022, this script is, mostly, in maintenance mode.

# Feature ideas:
# * commands:
#     git-merge --ff, --no-ff
#     git-commit -S | git-log --show-signature
#     git-log rev ranges as dynamic
#       * needs strict order to differentiate (digit-only hashes cause issues)
#     git-switch implicitely add '-d' when provided with tag
#       * requries TargetProc to be passed $Opts-ref or use external $Opts
# Issue-tracker:
# * dynamic opt for git-reset, restricts with s, h
#   * has to restrict WITHOUT being removed from %Disp
#   * loop over all, check if dyn present and process
#   * $Dynrestrict to disallow all dynamics when static given
# Internal:

my $Author    = 'Nico Pareigis';
my ($Program) = $0 =~ m{^.*/(.+)$};
my $Version   = '0.2.4-maintenance';

my $Debug = ''; my $NoDefault = ''; my $ErrM = ''; my $ErrC = 0;
my sub Err {
  printf STDERR "$Program: %s\n", $_[1];
  exit($_[0]) if $_[0] > 0;
}
# Register signal handlers:
@SIG{'INT','TERM'} = (sub { Err(130, 'caught interrupt.') }) x 2;

my sub SigHandler { local $_ = shift;
  unless ($ErrM) {
    ($ErrC, $ErrM) = (  1, 'no help available - '.$_[0])  if /^HelpErr$/;
    ($ErrC, $ErrM) = (  1, 'illegal argument - '.$_[0])   if /^ArgErr$/;
    ($ErrC, $ErrM) = (  1, 'no arguments allowed.')       if /^BanErr$/;
    ($ErrC, $ErrM) = (  2, 'missing branch name.')        if /^BranchErr$/;
    ($ErrC, $ErrM) = (  2, 'missing commit.')             if /^CommErr$/;
    ($ErrC, $ErrM) = (  2, 'missing filename.')           if /^FileErr$/;
    ($ErrC, $ErrM) = (  2, 'missing destination.')        if /^MvDErr$/;
    ($ErrC, $ErrM) = (  2, 'missing name.')               if /^NameErr$/;
    ($ErrC, $ErrM) = (  2, 'missing refspec.')            if /^RefErr$/;
    ($ErrC, $ErrM) = (  2, 'missing tagname.')            if /^TagErr$/;
    ($ErrC, $ErrM) = (  2, 'missing URL.')                if /^URLErr$/;
    ($ErrC, $ErrM) = (  3, 'not in a git repository.')    if /^RepoErr$/;
    ($ErrC, $ErrM) = (  4, 'dependency not met - '.$_[0]) if /^DepErr$/;
    ($ErrC, $ErrM) = (130, 'execution aborted.')          if /^IntErr$/;
  }
  return if $Debug; Err($ErrC, $ErrM);
}
my sub TargetErrHandler($$) {
  local $_  = shift;
  my $O     = shift;
  my $Err   = 'File';

  if    ((/^switch$/ and $O =~ /\Wd\W/) or /^revert$/)  { $Err = 'Comm'; }
  elsif (/^(?:branch|merge|rebase|switch)$/)            { $Err = 'Branch'; }
  elsif (/^clone$/)                                     { $Err = 'URL'; }
  elsif (/^push$/)                                      { $Err = 'Ref'; }
  elsif (/^(?:remote|worktree)$/)                       { $Err = 'Name'; }
  elsif (/^tag$/)                                       { $Err = 'Tag'; }
  SigHandler($Err.'Err');
}


# Help subroutines
# ----------------
my sub D {
  return "    D
        Run $Program in debug mode. Print relevant information to STDOUT, but
        don't run the actual git command.";
}
my sub N {
  return "    N
        Prevent processing all default options. Useful when using verbatim words
        (see DESCRIPTION) that conflict with default options. The built-in short
        options are still processed and can still be used alongside this.

        NOTE: dynamic options can currenlty not be excluded (e.g. default
        git-log limit '-4').";
}
my sub h {
  return "    [-]h [OPT]
        Print help information and exit.
        When passed a valid command name as the first argument, only print infor-
        mation concerning that command. Subsequent arguments are discarded.";
}
my sub a {
  return "    a [i] [p] -- FILE...
        Shorthand for 'git add', where
          'i' => -i
          'p' => -p";
}
my sub b {
  return "    b [acdm] [-- BRANCH...]
        Shorthand for 'git branch', where
          'a' => -a
          'c' => -c
          'd' => -d
          'm' => -m";
}
my sub c {
  return "    c [a] [commit msg [%% submsg]] [-- FILE...]
        Shorthand for 'git commit', where
          'a' => --amend

        Optionally takes one or two commit messages, where '%%' acts as a sepa-
        rator between the two. The second commit message is passed as a submes-
        sage to git.
        NOTE: Unquoted double dashes or single percent signs (quoted or not) in
        mesages will break parsing!";
}
my sub d {
  return "    d [c] [COMMIT...] [-- FILE...]
    d [s] [-- FILE...]
        Shorthand for 'git diff', where
          'c' => --cached
          's' => --stat";
}
my sub f {
  return "    f
        Shorthand for 'git-fetch'.";
}
my sub i {
  return "    i [b] [BRANCH] [-- DIR]
        Shorthand for 'git init', where
          'b'      => --bare
          'BRANCH' => -b BRANCH (default is '-b master')";
}
my sub l {
  return "    l [ls] [n|st] [INT|a] [-- FILE...]
        Shorthand for 'git log --abbrev-commit', where
          'l'   => --pretty=medium
          's'   => --pretty=oneline, default
          'n'   => --name-only
          'st'  => --stat
          'INT' => -INT (default is '-4', 'a' shows full log)";
}
my sub _m {
  return "    m [merge msg] -- BRANCH
    m [acq]
        Shorthand for 'git merge', where
          'a' => --abort
          'c' => --continue
          'q' => --quit

        Optionally takes merge messages. See 'c' for information on formatting.";
}
my sub _s {
  return "    s [ls] [a] [-- FILE...]
        Shorthand for 'git status', where
          'l' => --long
          's' => -s, default
          'a' => --ahead-behind";
}
my sub t {
  return "    t [INT] [l]      [-- TAG [OBJECT...]]
    t [ads] [tag msg] -- TAG [OBJECT...]
        Shorthand for 'git tag', where
          'l'   => -l, default
          'INT' => -nINT
          'a'   => -a
          'd'   => -d
          's'   => -s

        Optionally takes tag messages. See 'c' for information on formatting.";
}
my sub cl {
  return "    cl [b] [INT] -- URL [DIR]
        Shorthand for 'git clone', where
          'b'   => --bare
          'INT' => --depth INT

        Omitting the URL schema assumes https. A URL starting with a percent
        sign (%) is assumed to refer to a github repository. Local repositories
        may be cloned with both relative and absolute URLs.

        '$Program cl -- [https://]github.com/user/repo | %user/repo'
        will try to clone a repository at 'https://github.com/user/repo'";
}
my sub mv {
  return "    mv -- SOURCE... DEST
        Shorthand for 'git mv'.";
}
my sub pl {
  return "    pl [nr] [-- REPO [REF]]
        Shorthand for 'git pull', where
          'n' => --no-rebase
          'r' => --rebase";
}
my sub ps {
  return "    ps [at] [u] [-- REPO [REF]]
    ps d [u] -- [REPO] REF
        Shorthand for 'git push', where
          'a' => --all
          't' => --tags
          'd' => -d
          'u' => -u";
}
my sub re {
  return "    re -- FILE...
    re [sh] [-- FILE...]
        Shothand for 'git reset', where
          'h' => --hard
          's' => --soft";
}
my sub rm {
  return "    rm [cn] [r] -- FILE...
        Shorthand for 'git rm', where
          'c' => --cached, default
          'n' => \"not --cached\"
          'r' => -r

        $Program will prompt the user when trying to run recursively with 'n'.";
}
my sub sh {
  return "    sh [ls] [COMMIT...] [-- OBJECT...]
        Shorthand for 'git show --abbrev-commit', where
          'l' => --pretty=medium
          's' => --pretty=oneline, default";
}
my sub st {
  return "    st c
    st u      [-- FILE...]
    st [dlos] [-- STASHREF...]
        Shorthand for 'git stash', where
          'c' => clear
          'u' => push
          'd' => drop
          'l' => list, default
          'o' => pop
          's' => show";
}
my sub sw {
  return "    sw [d] [-- -|BRANCH|COMMIT]
        Shorthand for 'git switch', where
          'd' => -d";
}
my sub wt {
  return "    wt [l]
    wt a -- PATH [COMMIT]
    wt mv -- SOURCE DEST
    wt rm -- PATH
        Shorthand for 'git worktree', where
        'l'  => list, default
        'a'  => add
        'mv' => move
        'rm' => remove
  ";
}
my sub reb {
  return "    reb [i] [-- BRANCH]
    reb [acq]
        Shorthand for 'git rebase', where
          'i' => -i
          'a' => --abort
          'c' => --continue
          'q' => --quit";
}
my sub rem {
  return "    rem v [-- NAME]
    rem [au] -- NAME URL
    rem r -- OLD  NEW
    rem R -- NAME
        Run 'git remote' on NAME.
          'v' => -v show, default
          'a' => add
          'u' => set-url
          'r' => rename
          'R' => rm

          URLs are treated the same way they are for 'c'.";
}
my sub res {
  return "    res [ns] -- FILE...
        Shorthand for 'git restore', where
          'n' => \"not --staged\"
          's' => --staged, default";
}
my sub rev {
  return "    rev [en] -- COMMIT...
        Shorthand for 'git revert', where
          'e' => -e, default
          'n' => --no-edit";
}

my @Help = (
  D, N, h, a, b, c, d, f, i, l, _m, _s, t,
  cl, mv, pl, ps, re, rm, sh, st, sw, wt,
  reb, rem, res, rev
);

my sub Help {
print "NAME
    $Program - shorthands for git commands

SYNOPSIS
    $Program [D] [CMD [OPTS]] [-- TARGET]

DESCRIPTION
    $Program aims to provide some useful shorthands for basic git operations. It
    doesn't try to support all of git's features or functionality.
    Running $Program without any arguments runs 'git status -s'.

    $Program currently provides shorthands for the following commands:
    add, branch, clone, commit, diff, fetch, init, log, merge, mv, pull, push,
    rebase, remote, reset, restore, revert, rm, show, stash, status, switch, tag,
    worktree

    $Program supports 'verbatim words' (vwords), which are passed directly to
    Git with no special treatment or checks. vwords can be used to access Git
    options that are not natively supported. vwords are prefixed with a '+';
    each of them is appended to the Git command's option string in the
    order they are encountered.
  
    NOTE:
    vwords are not validated; they may clash with $Program\'s default options
    (see 'N').

    When used alongside messages (commit, merge, tag), make sure to quote the
    message to avoid accidental interpretation of part of the message as a vword.

OPTIONS
    In the following section, '=>' should be read as 'expands to'.\n";
print $_."\n" foreach @Help;
print "EXIT STATUS
    0, on success
    1, on argument error
    2, when missing filename or similar
    3, when trying to run outside of a git repository
    4, on dependency error
  130, on keyboard interrupt

DEPENDENCIES
    git

VERSION
    $Version

AUTHOR(S)
    $Author";
}


my ($TargetOpt, $TargetReq, $TargetBan) = ('') x 3;
my @Bans      = qw'f wt';
my @Optional  = qw'b c d i l s pl ps sh sw st reb';
my @Requires  = qw'a m t cl mv re rm rem res rev';


# Preliminary checks
# ------------------
# Dependencies:
`git --version 2>/dev/null` or SigHandler('DepErr', 'git');

# Help, Debug, Requires / Optional:
if (local $_ = $ARGV[0]) { # TODO: all special as $ARGV[0] and `for split ''`
  my $Help;
  do { $Debug     = 1; shift; } if /^D$/;
  do { $NoDefault = 1; shift; } if local $_ = $ARGV[0] and /^N$/;

  if (local $_ = $ARGV[0] and /^(?:(?:-)?h|--help|-\?)$/) {
    if ($Debug) { $Help = 1; }
    else {
      do { Help();    exit(0); } if not $ARGV[1];
      do { print $_;  exit(0); } if local ($_) = grep(/^\s*$ARGV[1]\W/, @Help);
      SigHandler('HelpErr', $ARGV[1]);
    }
  }

  Err(2, 'cannot debug help.')  if $Debug and $Help;
  Err(2, 'nothing to debug.')   if $Debug and not $ARGV[0];

  foreach (@Bans)     { do { $TargetBan = 1; last; } if /^$ARGV[0]$/ };
  foreach (@Optional) { do { $TargetOpt = 1; last; } if /^$ARGV[0]$/ };
  foreach (@Requires) { do { $TargetReq = 1; last; } if /^$ARGV[0]$/ };
}


# Option processing
# -----------------
my ($Action, $Opts) = ('') x 2;
my (@Args, @Targets, %Disp, %Prio, %Rstr) = (()) x 5;

my sub Default() {
  $Action = 'status';
  $Opts   = '-s';
}

my sub OptProc($\%\%\%\@) {
  my $Action  = shift;  # action
  my $Opts    = '';     # internal optstring
  my $Verb    = '';     # verbatim optstring
  my %Disp = %{+shift}; # dispatch table
  my %Prio = %{+shift}; # priority hash
  my %Rstr = %{+shift}; # restrict hash
  my @Args = @{+shift}; # arguments

  # Helper subroutines:
  my sub MsgGen($\@) {
    my ($M1, $M2) = ('') x 2;
    local $_ = shift; my $ArgRef = shift;
    unshift(@$ArgRef, $_);

    s/"/\\"/g foreach @$ArgRef;
    join(' ', @$ArgRef) =~ /^(.*?)(?:\s+%%\s+(.*?))?$/;
      $1 and $M1 = "-m \"$1\"";
      $2 and $M2 = "-m \"$2\"";
    undef @$ArgRef;
    return $M1.' '.$M2;
  }

  # TODO: save dynamic options in separate hash
  my sub DynProc($) { local $_ = shift;
    if ($Action eq 'clone' and $Disp{_1} eq '' and /^\d+$/) {
      return (1, '--depth '.$_) 
    }

    if ($Action =~ /^commit$/ and $Disp{_1} eq '') {
      return (1, MsgGen($_, @Args));
    }

    if ($Action =~ /^(?:diff|show)$/ and $Disp{_1} eq '') {
      unshift(@Args, $_); my $Commits = join(' ', @Args); undef @Args;
      return(1, $Commits);
    }

    if ($Action eq 'init' and $Disp{_1} eq '-b master') {
      return (1, '-b '.$_);
    }

    if ($Action eq 'log' and $Disp{_1} eq '-4') {
      return (1, ' ')     if /^a$/;
      return (1, '-'.$_)  if /^\d+$/;
    }

    if ($Action =~ /^merge$/ and $Disp{_1} eq '') {
      SigHandler('BanErr', $_) if $Opts =~ /--(?:abort|continue|quit)/;
      return (1, MsgGen($_, @Args));
    }

    if ($Action eq 'reset' and $Disp{_1} eq '') { return (1, $_); }

    if ($Action eq 'tag' and $Disp{_1} eq '') {
      if ($Opts =~ /-(?:a|d|s)/) { return (1, MsgGen($_, @Args)); }
      else {
        SigHandler('ArgErr', $_) if not /\d+/ or grep(/a|d|s/, @Args);
        return (1, '-n'.$_);
      }
    }

    return (undef, undef);
  }

  my sub PrioSort(\%) { my %Hash = %{+shift};
    foreach (keys %Hash) {
      if (not $Prio{$_}) {
        do {  $Prio{$_} = 9; next; } if /^D$/;
              $Prio{$_} = 0;
      }
    }
    sort { return -1 * ($Prio{$a} <=> $Prio{$b}); } keys %Hash;
  }

  my sub RstrRemove($) { my $K = shift;
    # TODO:
    # * ignores priority for implicit cascade
    # * can be used for branch, merge, stash, remote
    # if ((%Rstr)[0] eq 'ALL') {
    #   foreach (keys %Disp) { delete %Disp{$_} if not /^(?:D|_\d+|$K)$/; }
    #   return;
    # }

    return if not local $_ = $Rstr{$K};

    if (/^_$/) {
      foreach (%Rstr) {
        next if $_ eq $K;
        delete $Disp{$_} if $Rstr{$_} and $Rstr{$_} eq '_'
      }
    } else {
      my @Rstr = split(':');
      delete $Disp{$_} foreach @Rstr;
    }
  }

  # Processing:
  my $i = 0;
  while ($i <= $#Args) { local $_ = $Args[$i];
    if (/^\+\S+/) {
      $Verb .= ' '.substr($_, 1);
      delete $Args[$i];

      my @Tmp = @Args[$i+1..$#Args];
      splice @Args, $i;
      @Args = (@Args, @Tmp);
    } else { $i++; }
  }
  undef $i;

  while (local $_ = shift @Args) {
    if ($Disp{$_}) {  # Process static options
      $Opts .= $Disp{$_}.' ';
      delete $Disp{$_};
      delete $Prio{$_} if $Prio{$_};
      RstrRemove($_);
    } else {          # Process dynamic options
      my ($K, $V) = DynProc($_);
      $K and $Disp{'_'.$K} = $V or SigHandler('ArgErr', $_);
    }
  }

  # Build option string through implicit cascade:
  foreach (PrioSort %Disp) {
    next if $NoDefault and not /^_/;
    next if $Prio{$_} < 0 or not $Disp{$_};
    RstrRemove($_);
    $Opts .= $Disp{$_}.' ';
  }
  return $Opts.' '.$Verb;
}

my sub TargetProc($$) {
  my $Action    = shift;
  my $Opts      = shift;
  my @Targets   = @ARGV; shift @Targets if @Targets and $Targets[0] eq '--';
  local $_ = $Action;

  # TargetReq -> TargetOpt
  do { undef $TargetReq; $TargetOpt = 1; }
    if /^add$/      and $Opts =~ /-(?:i|p)/
      or /^remote$/ and $Opts =~ /-v/
      or /^reset$/  and $Opts =~ /--(?:soft|hard)/
      or /^tag$/    and $Opts =~ /-(?:l|n\d+)/;

  # TargetOpt -> TargetReq
  do { undef $TargetOpt; $TargetReq = 1; }
    if /^branch$/ and $Opts =~ /-(?:c|d|m)/
      or /^push$/ and $Opts =~ /-d/;

  # TargetBan -> TargetReq
  do { undef $TargetBan; $TargetReq = 1; }
    if /^worktree$/ and $Opts =~ /(?:add|move|remove)/;

  # * -> TargetBan
  do { undef $TargetOpt; undef $TargetReq; $TargetBan = 1; }
    if /^(?:merge|rebase)$/ and $Opts =~ /--(?:abort|continue|quit)/
    or /^stash$/            and $Opts =~ /clear/;

  SigHandler('BanErr') if $TargetBan and @Targets;

  # Edge-case handling:
  if (/^clone|remote$/) {
    for my $i (0 .. $#Targets)  { local $_ = $Targets[$i];
      unless (m{^(?:\.){0,2}/} || stat) { # Ignore local paths
        my ($Schema, $Host) = ('') x 2;
        $Schema = 'https://'    if m{^(?!.*://).*?/};
        $Host   = 'github.com'  if /^%/;
        s/%/\//; $Targets[$i] = $Schema.$Host.$_;
      }
    }
  }
  elsif (/^rm$/ and $Opts =~ /-r/ and $Opts !~ /--cached/ and not $Debug) {
    print STDERR 'WARNING';
    my $Confirm = '';
    until ($Confirm =~ /^(?:y|n|\n)$/i) {
      printf 'Confirm non-cached, recursive removal (y/N): ';
      $Confirm = <STDIN>;
    }
    SigHandler('IntErr') if $Confirm =~ /^(?:n)?\n$/i;
  }
  elsif (/^switch$/ and not @Targets) {
    @Targets = '-';
  }

  if ($TargetReq) {
    if (scalar @Targets == 1) {
      SigHandler('MvDErr')  if /^mv$/ or (/^worktree$/ and $Opts =~ /\bmove/);
      SigHandler('URLErr')  if /^remote$/ and $Opts =~ /add|set-url/;
      SigHandler('NameErr') if /^remote$/ and $Opts =~ /rename/;
    }
    elsif (not @Targets) { TargetErrHandler($_, $Opts); }
  }

  # Escape spaces and return:
  s/ /\\ /g foreach @Targets; return @Targets;
}


if (local $_ = shift) {
  if (/^a$/) {
    $Action = 'add';
    %Disp = (i => '-i', p => '-p');
    %Prio = (i => -1,   p => -1);
  }
  elsif (/^b$/) {
    $Action = 'branch';
    %Disp = (a => '-a', c => '-c', d => '-d', m => '-m');
    %Prio = (a => -1,   c => -2,   d => -2,   m => -2);
    %Rstr = (a => '_',  c => '_',  d => '_',  m => '_');
  }
  elsif (/^c$/) {
    $Action = 'commit';
    %Disp = (a => '--amend', _1 => '');
    %Prio = (a => -1);
  }
  elsif (/^d$/) {
    $Action = 'diff';
    %Disp = (c => '--cached', s => '--stat', _1 => '');
    %Prio = (c => -1,         s => -1);
  }
  elsif (/^f$/) { $Action = 'fetch'; }
  elsif (/^l$/) {
    $Action = 'log';
    %Disp = (
      D => '--abbrev-commit', s => '--pretty=oneline', l => '--pretty=medium',
      n => '--name-only',    st => '--stat',          _1 => '-4'
    );
    %Prio = (s => 2,   l => 1,   n => -1,   st => -1);
    %Rstr = (s => 'l', l => 's', n => 'st', st => 'n');
  }
  elsif (/^i$/) {
    $Action = 'init';
    %Disp = (b => '--bare', _1 => '-b master');
    %Prio = (b => -1);
  }
  elsif (/^m$/) {
    $Action = 'merge';
    %Disp = (a => '--abort', c => '--continue', q => '--quit', _1 => '');
    %Prio = (a => -1,        c => -2,           q => -2);
    %Rstr = (a => '_',       c => '_',          q => '_');
  }
  elsif (/^s$/) {
    $Action = 'status';
    %Disp = (s => '-s', l => '--long', a => '--ahead-behind');
    %Prio = (s => 2,    l => 1,        a => -1);
    %Rstr = (s => 'l',  l => 's');
  }
  elsif (/^t$/) {
    $Action = 'tag';
    %Disp = (a => '-a',    d => '-d',    l => '-l',    s => '-s', _1 => '');
    %Prio = (a => 1,       d => 1,       l => 2,       s => 1);
    %Rstr = (a => 'd:l:s', d => 'a:l:s', l => 'a:d:s', s => 'a:d:l');
  }
  elsif (/^cl$/) {
    $Action = 'clone';
    %Disp = (b => '--bare', _1 => '');
    %Prio = (b => -1);
  }
  elsif (/^mv$/) { $Action = 'mv'; }
  elsif (/^pl$/) {
    $Action = 'pull';
    %Disp = (n => '--no-rebase', r => '--rebase');
    %Prio = (n => -1,            r => -2);
    %Rstr = (n => 'r',           r => 'n');
  }
  elsif (/^ps$/) {
    $Action = 'push';
    %Disp = (a => '--all', d => '-d',  t => '--tags', u => '-u');
    %Prio = (a => -1,      d => -1,    t => -1,       u => -1);
    %Rstr = (a => 'd:t',   d => 'a:t', t => 'a:d')
  }
  elsif (/^re$/) {
    $Action = 'reset';
    %Disp = (h => '--hard', s => '--soft', _1 => '');
    %Prio = (h => -2,       s => -1,       _1 => 0);
    %Rstr = (h => '_',      s => '_',      _1 => 's:h');
  }
  elsif (/^rm$/) {
    $Action = 'rm';
    %Disp = (c => '--cached', n => ' ', r => '-r');
    %Prio = (c => 2,          n => 1,   r => -1);
    %Rstr = (c => 'n',        n => 'c');
  }
  elsif (/^sh$/) {
    $Action = 'show';
    %Disp = (
      D => '--abbrev-commit', l => '--pretty=medium', s => '--pretty=oneline',
      _1 => ''
    );
    %Prio = (l => 1,   s => 2);
    %Rstr = (l => 's', s => 'l');
  }
  elsif (/^st$/) {
    $Action = 'stash';
    %Disp = (
      c => 'clear', d => 'drop', l => 'list', o => 'pop', u => 'push',
      s => 'show'
    );
    %Prio = (c => 1,   d => 1,   l => 2,   o => 1,   u => 1,   s => 1);
    %Rstr = (c => '_', d => '_', l => '_', o => '_', u => '_', s => '_');
  }
  elsif (/^sw$/) {
    $Action = 'switch';
    %Disp = (d => '-d');
    %Prio = (d => -1);
  }
  elsif (/^wt$/) {
    $Action = 'worktree';
    %Disp = (a => 'add', l => 'list', mv => 'move', rm => 'remove');
    %Prio = (a => 1, l => 2, mv => 1, rm => 1);
    %Rstr = (a => '_', l => '_', mv => '_', rm => '_');
  }
  elsif (/^reb$/) {
    $Action = 'rebase';
    %Disp = (a => '--abort', c => '--continue', i => '-i',    q => '--quit');
    %Prio = (a => -1,        c => -2,           i => -1,      q => -2);
    %Rstr = (a => 'c:i:q',   c => 'a:i:q',      i => 'a:c:q', q => 'a:c:i');
  }
  elsif (/^rem$/) {
    $Action = 'remote';
    %Disp = (
      a => 'add', r => 'rename', R => 'rm', u => 'set-url', v => '-v show'
    );
    %Prio = (a => 1,   r => 1,   R => 1,   u => 1,   v => 2);
    %Rstr = (a => '_', r => '_', R => '_', u => '_', v => '_');
  }
  elsif (/^res$/) {
    $Action = 'restore';
    %Disp = (s => '--staged', n => ' ');
    %Prio = (s => 2,          n => 1);
    %Rstr = (s => 'n',        n => 's');
  }
  elsif (/^rev$/) {
    $Action = 'revert';
    %Disp = (e => '-e', n => '--no-edit');
    %Prio = (e => 2,    n =>  1);
    %Rstr = (e => 'n',  n => 'e');
  }
  elsif (/^--$/) {
    Default();
  } else { SigHandler('ArgErr', $_); }

  if (not /^--$/) {   # Generate @Args
    push(@Args, shift) until not @ARGV or $ARGV[0] eq '--';
  }

  $Opts     = OptProc($Action, %Disp, %Prio, %Rstr, @Args) if not $Opts;
  @Targets  = TargetProc($Action, $Opts);
} else { Default(); } # No arguments passed


# Execution
# ---------
# Repository check:
unless ($Action =~ /^(?:clone|init)$/) {
  `git rev-parse --is-inside-git-dir 2>/dev/null` or SigHandler('RepoErr');
}

# String generation:
my $Command = "git $Action $Opts -- @Targets";
$Command =~ s/--\s//
  if $Action =~ /^(?:merge|rebase)$/ and $Opts =~ /--(?:abort|continue|quit)/;
$Command  =~ s/\s+/ /g;
$Opts     =~ s/\s+/ /g;

# Edge-case early execution:
unless ($Debug) {
  if ($Action eq 'status' and $Opts =~ /--ahead-behind/) {
    `git status --ahead-behind` =~ /(Your branch is .*\.)/;
    print $1 if $1; exit(0);
  }
}

# Debugging information / normal execution:
if ($Debug) {
  $TargetReq and $TargetReq = 'True' or $TargetReq = 'False';
  $TargetOpt and $TargetOpt = 'True' or $TargetOpt = 'False';
  print "- DEBUG MODE -\nAction : $Action\nOpts   : $Opts\n";
  print "TargetReq : $TargetReq\nTargetOpt : $TargetOpt\nTarget(s) :";
  print "    $_" foreach @Targets;
  print "\nGit command to be run:\n    $Command";
  if ($ErrM) {
    print "\nScript will refuse execution:";
    print "    Reason      : `$ErrM`";
    print "    Exit status : `$ErrC`";
  }
} else { system("$Command"); }
