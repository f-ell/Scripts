#!/usr/bin/bash

trap 'err 130 interrupt' HUP INT QUIT TERM

typeset -g PROGRAM='j'
typeset -g AUTHOR='Nico Pareigis'
typeset -g VERSION='0.2.0'

typeset -A CFG=(
  [c_dir]="${XDG_CACHE_HOME:-~/.cache}/jump"
  [ifs]="$IFS"

  [c_clear]=

  [inv]="$PWD"
  [cwd]="$PWD"
  [cache]=1
  [depth]=8
  [fuzzy]="${J_FUZZY:-fzf}"
  [hidden]=
  [links]=
)

CFG[c_src]="${CFG[c_dir]}/src"
CFG[c_dst]="${CFG[c_dir]}/dst"
CFG[c_jmp]="${CFG[c_dir]}/jmp"

# ---------------------------------------------------------------------- utility

function err {
  printf '%s: %s\n' "$PROGRAM" "$2" 1>&2
  (( $1 > 0 )) && exit $1
}

function dep {
  typeset -a unmet

  for dep in "$@"; do
    if ! command -v $dep 1>/dev/null; then
      unmet+=($dep)
    fi
  done

  local IFS=','
  ((${#unmet[@]} > 0)) && err 4 "dependency not met: ${unmet[*]}"
}

function valid {
  [[ -n $1 && $1 != -- ]]
}

function usage {
  while read; do
    printf "$REPLY\n"
  done <<-EOF
	NAME
	    $PROGRAM - find and jump to child-directories

	SYNOPSIS
	    $PROGRAM [<options>] [<pattern>]
	    $PROGRAM [<options>] [<directory>] [<pattern>...]

	DESCRIPTION
	    $PROGRAM uses \`fd\` to find jump candidates.
	    <directory> specifies the directory in which to search for candidates.
	    <pattern> may be any regex understood by \`fd\` (uses smart-case by
	    default).

	    In case there is more than on jump candidate, the target is determined
	    using a fuzzy finder (see OPTIONS and ENVIRONMENT VARIABLES below). Jump
	    information is cached to allow repeated jumping to specific targets.

	OPTIONS
	    -a | --all
	        Include hidden directories in search results.

	    -c | --no-cache
	        Ignore jump cache when resolving jump targets.

	    -C | --clear <pattern>
	        Remove cache entry for <pattern>.

	    -d | --depth <int>
	        Set \`fd\` search depth to <int>, default is 8.
	        <int> should be a positive, non-zero integer.

	    -f | --zf
	        Use \`zf\` for fuzzy-finding.

	    -h | --help
	        Print help information and exit.

	    -l | --links
	        Include symlinks in search results.

	    -s | --source
	        Jump to the source directory of the last invocation (i.e. PWD $PROGRAM
	        as last called from).

	    -t | --target
	        Jump to the target of the last invocation.

	    -v | --version
	        Print version information and exit.

	    -y | --fzy
	        Use \`fzy\` for fuzzy-finding.

	    -z | --fzf
	        Use \`fzf\` for fuzzy-finding.

	        \`fzf\`'s multi-selection feature is not properly supported.
	        Usage may result in unexpected behaviour.

	ENVIRONMENT VARIABLES
	    J_FUZZY
	        Can be used to specify a fuzzy-finder program other than the natively
	        supported ones.

	        The program needs to be executable and
	          a) be available in PATH, or
	          b) specified as an absolute or relative path.

	        It should read the jump candidates as a newline separated list from
	        STDIN and return a single line, which will be used as the jump target.

	    J_IGNORE
	        Can be a colon-separated list (similar to PATH) of glob-patterns to
	        exclude from search results (passed to \`fd\`'s '-E' option).

	    J_INVERT_ALL
	        If this is defined and has a value of '1', inverts the behaviour of
	        the -a flag, i.e. includes hidden files in results *unless* -a is
	        present.

	EXIT STATUS
	      1, on argument error
	      2, when no matches are found / missing jump information
	      4, on dependency or filesystem error
	    130, on keyboard interrupt

	DEPENDENCIES
	    Coreutils:
	        realpath

	    Other:
	        fd
	        fzf | fzy | zf (optional, depending on arguments / environment)

	VERSION
	    $VERSION

	AUTHOR(S)
	    $AUTHOR
	EOF
}

function version {
  printf "$PROGRAM $VERSION $AUTHOR\n"
}

# ------------------------------------------------------------------------- func

function parse_cmdline {
  typeset -n n_patterns=$1
  shift

  while [[ -n $@ ]]; do
    case "$1" in
      -a|--all)
        CFG[hidden]='-H'
        shift
        ;;

      -c|--no-cache)
        CFG[cache]=0
        shift
        ;;

      -C|--clear)
        typeset arg=$1
        shift

        valid "$1" || err 1 "illegal argument $arg: $1"

        CFG[c_clear]="$1"
        shift
        ;;

      -d|--depth)
        typeset arg=$1
        shift

        valid "$1" || err 1 "illegal argument $arg: $1"
        [[ $1 =~ ^[[:digit:]]+$ ]] && (( $1 > 0 )) || err 1 "$arg: expected positive integer, got $arg"

        CFG[depth]=$1
        shift
        ;;

      -f|--zf)
        CFG[fuzzy]='zf'
        shift
        ;;

      -h|--help)
        usage
        exit 0
        ;;

      -l|--links)
        CFG[links]='-L'
        shift
        ;;

      -s|--source)
        rejump ${CFG[c_src]};;

      -t|--target)
        rejump ${CFG[c_dst]};;

      -v|--version)
        version
        exit 0
        ;;

      -y|--fzy)
        CFG[fuzzy]='fzy'
        shift
        ;;

      -z|--fzf)
        CFG[fuzzy]='fzf'
        shift
        ;;

      -*)
        [[ $1 != -- ]] && err 1 "illegal argument: $1";&

      --|*)
        [[ $1 == -- ]] && shift

        if (( $# > 1 )); then
          [[ ! -d $1 ]] && err 1 "not a directory: $1"

          CFG[cwd]=`realpath "$1"`
          shift
        fi

        patterns+=("$@")
        break
        ;;
    esac
  done
}

function fd_exclude {
  typeset -n n_exclude=$1

  local IFS=':'
  for pattern in $J_IGNORE; do
    [[ -z $pattern ]] && continue
    n_exclude+=("$pattern")
  done
}

function clear_cache {
  typeset query="$1"
  mapfile <"${CFG[c_jmp]}"

  for i in ${!MAPFILE[@]}; do
    [[ ${MAPFILE[$i]} =~ ^"$query | " ]] || continue

    unset MAPFILE[$i]
    break
  done

  printf "%s" "${MAPFILE[@]}" >"${CFG[c_jmp]}"
}

function try_cache {
  typeset query="$1"
  typeset -n n_out=$2

  local IFS=$'\n'
  while read; do
    [[ $REPLY =~ ^"$query | "(.+) ]] || continue

    n_out="${BASH_REMATCH[1]}"
    break
  done <"${CFG[c_jmp]}"
}

function write_cache {
  typeset query="$1" target="$2"
  printf "%s | %s\n" "$query" `realpath "$target"` >>"${CFG[c_jmp]}" \
    || err 0 'failed to update jump cache'
}

function write_src_cache {
  typeset dst="$1"

  printf "${CFG[inv]}\n" 1>"${CFG[c_src]}" \
    || err 0 'failed to update source cache'
  printf "%s\n" `realpath ${dst#/${CFG[cwd]}}` 1>"${CFG[c_dst]}" \
    || err 0 'failed to update destination cache'
}

function jump {
  typeset -i update_src_cache=$1
  typeset target=$2

  if (( $update_src_cache == 1 )); then
    write_src_cache "$target"
  fi
  printf "cd '%s'\n" "$target"
}

function rejump {
  [[ ! -f $1 ]] && err 1 'jump cache miss'
  [[ ! -r $1 ]] && err 4 'failed to read jump cache'

  jump 0 `< "$1"`
  exit 0
}

# -------------------------------------------------------------------- execution

typeset -a patterns=()
typeset -a exclude=()
typeset -a candidates=()
typeset target=

[[ -d ${CFG[c_dir]} ]] \
  || mkdir -p "${CFG[c_dir]}" \
  || err 4 'could not create cache directory'
[[ -f ${CFG[c_jmp]} ]] \
  || printf '' >"${CFG[c_jmp]}" \
  || err 4 'could not create jumplist in cache directory' 

parse_cmdline patterns "$@"
dep 'fd' 'mkdir' 'realpath' ${CFG[fuzzy]%% *}

if [[ -n ${CFG[c_clear]} ]]; then
  clear_cache "${CFG[c_clear]// /:}"
  exit 0
fi

if (( ${J_INVERT_ALL:-0} == 1 )); then
  [[ -z ${CFG[hidden]} ]] && CFG[hidden]='-H' || CFG[hidden]=
fi

fd_exclude exclude

cd "${CFG[cwd]}"

if (( ${CFG[cache]} == 1 )); then
  IFS=':'
  try_cache "${patterns[*]}" target
  IFS="${CFG[ifs]}"

  if [[ -n $target ]]; then
    jump 1 "$target"
    exit 0
  fi
fi

mapfile < <(
  IFS='|' fd \
  -d${CFG[depth]} \
  -td \
  ${CFG[hidden]} \
  ${CFG[links]} \
  "${exclude[@]/#/-E}" \
  -- "${patterns[*]}"
)

if (( ${#MAPFILE[@]} == 0 )); then
  err 2 'no matches found'
elif (( ${#MAPFILE[@]} == 1 )); then
  target="${MAPFILE[0]%$'\n'}"
else
  target="`printf "%s\n" ${MAPFILE[@]} | ${CFG[fuzzy]}`"
  target="${target%$'\n'}"
  [[ -z $target ]] && err 130 'interrupt'
fi

if (( ${CFG[cache]} == 1 )); then
  IFS=':'
  write_cache "${patterns[*]}" "$target"
  IFS="${CFG[ifs]}"
fi

jump 1 "$target"
