#!/bin/bash

typeset -A NFF_META=(
  [PROGRAM]="${0##*/}"
  [VERSION]='2.1'
  [VERBOSE]=1
)
typeset -A _clr=(
  [reset]='\e[0m'
  [info]='\e[1;38;5;6m'
  [warn]='\e[1;38;5;3m'
)

function print_help() {
  while read; do
    printf '%s\n' "$REPLY"
  done <<-EOF
	NAME
	    nff - Neovim-Fuzzy-Finder - find and open files with Vi, Vim, or Neovim.

	SYNOPSIS
	    nff [OPTS] [DIR] [PATTERN]...

	DESCRIPTION
	    nff uses fd to recursively look for all files matching PATTERN in the
	    current directory or DIR. When more than one match is found, fzf, fzy, or
	    zf (descending priority) are used to select one of them. The selected
	    matches are opened for editing in either Vi, Vim, or Neovim (ascending
	    priority).

	    To override the executables used for fuzzy finding and editing, see
	    OPTIONS and ENVIRONMENT VARIABLES below.

	OPTIONS
	    -d INT, --depth INT
	        Set maximum search depth to INT. Default: 10.

	    -e PATTERN, --exclude PATTERN
	        Exclude PATTERN from search results. May be used multiple times. These
	        patterns are merged with the ones specified in the exclude-file (see
	        EXCLUDE FILE below).

	    -E, --editor
	        Use EDITOR as the executable to open files. Also see ENVIRONMENT
	        VARIABLES below.

	    -f, --zf
	        Use zf for fuzzy finding.

	    -h, --help
	        Print help and exit.

	    -I, --no-ignore
	        Include usually ignored files in search results. See fd(1).

	    -H, --exclude-hidden
	        Exclude hidden files from search results.

	    -L, --no-symlinks
	        Exclude symlinks from search results.

	    -o OPTS, --fuzzy-opts OPTS
	        Pass OPTS as options to the fuzzy finder.

	    -s, --silent
	        Suppress all log output.

	    -V, --version
	        Print version information and exit.

	    -y, --fzy
	        Use fzy for fuzzy finding.

	    -z, --fzf
	        Use fzf for fuzzy finding.

	EXCLUDE FILE
	    nff looks for a file called exclude.nff in its base directory. When
	    present, each line in the file will be passed as an exlude-pattern to fd.
	    Empty lines and lines starting with # are ignored.

	ENVIRONMENT VARIABLES
	    NFF_EDITOR     - Program to open files with. Supports word splitting.
	    NFF_FUZZY      - Program to use as fuzzy finder.
	    NFF_FUZZY_OPTS - Options passed to fuzzy finder.

	KNOWN BUGS
	    The current argument parsing implementation does not handle missing option
	    arguments properly.

	EXIT STATUS
	    0   - Success
	    1   - Argument error
	    2   - Dependency error
	    4   - No matches found
	    7   - Uncaught fuzzy finder error
	    130 - Interrupt

	DEPENDENCIES
	    fd               (8.3.2+)
	    fzf | fzy | zf   (0.30.0+ | 1.0+ | 0.5+)
	    vi  | vim | nvim (optional with -E)

	VERSION
	    ${NFF_META[VERSION]}

	AUTHOR
	    Nico Pareigis
	EOF
}

function print_version() {
  printf "nff ${NFF_META[VERSION]} Nico Pareigis\n"
}

function log() {
  (( ${NFF_META[VERBOSE]} != 1 )) && return
  printf '%b::%b %s\n' "${_clr[$1]}" "${_clr[reset]}" "$2"
}

function err() {
  printf '%s: %s\n' "${NFF_META[PROGRAM]}" "$2" 1>&2
  (( $1 > 0 )) && exit $1
}

# ------------------------------------------------------------------------------

function _shift() {
  typeset -n arr=$1
  arr=("${arr[@]:${2:-1}}")
}

function index() {
  typeset -n arr=$1

  typeset -i i
  for (( i=0; i<${#arr[@]}; i++ )); do
    [[ ${arr[$i]} == $2 ]] && return $i
  done

  return 255
}

function contains() {
  typeset -n arr=$1

  typeset i
  for i in "${arr[@]}"; do
    [[ $i == $2 ]] && return 0
  done
  return 1
}

function filter_uniq() {
  typeset -n arr=$1
  typeset -a tmp=()

  typeset i
  for i in "${arr[@]}"; do
    contains tmp "$i" || tmp+=("$i")
  done

  arr=("${tmp[@]}")
}

# ------------------------------------------------------------------------------

function dep_all() {
  typeset -a missing

  typeset d
  for d in "$@"; do
    if ! command -v "$d" 1>/dev/null; then
      missing+=("$d")
    fi
  done

  local IFS=,
  (( ${#missing[@]} > 0 )) && err 2 "dependency not met: ${missing[*]}"
}

function dep_any() {
  typeset -n out=$1
  shift
  typeset -a dependencies

  typeset d
  for d in "$@"; do
    if command -v "$d" 1>/dev/null; then
      out="$d"
      return
    fi

    dependencies+=("$d")
  done

  local IFS=,
  err 2 "dependency not met - need one of: ${dependencies[*]}"
}

function semantic_version() {
  typeset has="$1" want="$2"
  typeset -i i

  [[ $has =~ ^([[:digit:]]+)\.([[:digit:]]+)\.([[:digit:]]+)$ ]] || return 1
  typeset -a has_ver=(${BASH_REMATCH[@]:1})
  [[ $want =~ ^([[:digit:]]+)\.([[:digit:]]+)\.([[:digit:]]+)$ ]] || return 1
  typeset -a want_ver=(${BASH_REMATCH[@]:1})

  typeset -i all_eq=1
  for (( i=0; i<3; i++ )); do
    (( ${has_ver[$i]} != ${want_ver[$i]} )) && { all_eq=0; break; }
  done
  (( all_eq == 1 )) && return 0

  typeset -i prev_ge=1
  for (( i=0; i<3; i++ )); do
    (( ${has_ver[$i]} < ${want_ver[$i]} )) && { prev_ge=0; continue; }
    (( ${has_ver[$i]} > ${want_ver[$i]} && prev_ge == 1 )) && return 0
  done

  return 1
}

function majmin_version() {
  typeset has="$1" want="$2"
  typeset -i i

  [[ $has =~ ^([[:digit:]]+)\.([[:digit:]]+)$ ]] || return 1
  typeset -a has_ver=(${BASH_REMATCH[@]:1})
  [[ $want =~ ^([[:digit:]]+)\.([[:digit:]]+)$ ]] || return 1
  typeset -a want_ver=(${BASH_REMATCH[@]:1})

  typeset -i all_eq=1
  for (( i=0; i<2; i++ )); do
    (( ${has_ver[$i]} != ${want_ver[$i]} )) && { all_eq=0; break; }
  done
  (( all_eq == 1 )) && return 0

  typeset -i prev_ge=1
  for (( i=0; i<2; i++ )); do
    (( ${has_ver[$i]} < ${want_ver[$i]} )) && { prev_ge=0; continue; }
    (( ${has_ver[$i]} > ${want_ver[$i]} && prev_ge == 1 )) && return 0
  done

  return 1
}

function ensure_version() {
  typeset cmd
  for cmd in "$@"; do
    case $cmd in
      fd)
        typeset -a version=(`fd --version`)
        semantic_version ${version[1]} 8.3.2 \
          || log warn "version mismatch: $cmd (has ${version[1]}, want 8.3.2+)"
        ;;
      fzf)
        typeset -a version=(`fzf --version`)
        semantic_version ${version[0]} 0.30.0 \
          || log warn "version mismatch: $cmd (has ${version[0]}, want 0.30.0+)"
        ;;
      fzy)
        typeset -a version=(`fzy --version`)
        majmin_version ${version[1]} 1.0 \
          || log warn "version mismatch: $cmd (has ${version[1]}, want 1.0+)"
        ;;
      zf)
        # zf >= 0.9.0 writes version information to stderr
        # versions between 0.1.0 and 0.6.0 used <MAJOR>.<MINOR> format
        typeset -a version=(`zf --version 2>&1`)
        (
          semantic_version ${version[1]} 0.6.0 \
            || majmin_version ${version[1]} 0.5
        ) || log warn "version mismatch: $cmd (has ${version[1]}, want 0.5+|0.6.0+)"
        ;;
      *) log warn "using unsupported dependency: $cmd"
    esac
  done
}

# ------------------------------------------------------------------------------

function consume_argv() {
  typeset -n out=$1 argv=$2

  [[ ${argv[0]} =~ /$ && ! -d ${argv[0]} ]] \
    && err 1 "not a directory: ${argv[0]}"
  if [[ -d ${argv[0]} ]]; then
    CFG+=([cwd]="${argv[0]}")
    _shift ${!argv}
  fi

  out=("${argv[@]}")
  _shift ${!argv} ${#argv[@]}
}

function parse_cmdline() {
  typeset -a ARGV=("$@")

  index ARGV --
  typeset -i idx=$?
  if (( $idx != 255 )); then
    _argv_split=1
    PATTERNS=("${ARGV[@]:$idx+1}")
    ARGV=("${ARGV[@]:0:$idx}")
  fi

  while (( ${#ARGV[@]} > 0 )); do
    case ${ARGV[0]} in
      -h|--help)
        print_help
        exit 0
        ;;

      -s|--silent)
        NFF_META[VERBOSE]=0
        _shift ARGV
        ;;

      -V|--version)
        print_version
        exit 0
        ;;

      # ----------------------------------------------------

      -d|--depth)
        [[ ${ARGV[1]} =~ ^[[:digit:]]+$ ]] \
          || err 1 "invalid depth: ${ARGV[1]:--}"
        CFG+=([maxdepth]=$2)
        _shift ARGV 2
        ;;

      -e|--exclude)
        EXCLUDES+=("-E '${ARGV[1]}'")
        _shift ARGV 2
        ;;

      -E|--editor)
        [[ -z $EDITOR ]] && err 1 'EDITOR not set'
        NFF_EDITOR="$EDITOR"
        _shift ARGV
        ;;

      -f|--zf)
        NFF_FUZZY=zf
        _shift ARGV
        ;;

      -I|--no-ignore)
        CFG+=([ignore]=0)
        _shift ARGV
        ;;

      -H|--exclude-hidden)
        CFG+=([hidden]=0)
        _shift ARGV
        ;;

      -L|--no-symlinks)
        CFG+=([symlink]=0)
        _shift ARGV
        ;;

      -o|--fuzzy-opts)
        NFF_FUZZY_OPTS="${ARGV[1]}"
        _shift ARGV 2
        ;;

      -y|--fzy)
        NFF_FUZZY=fzy
        _shift ARGV
        ;;

      -z|--fzf)
        NFF_FUZZY=fzf
        _shift ARGV
        ;;

      --[^-]*|-[^-]*)
        err 1 "illegal argument: ${ARGV[0]}"
        ;;

      *)
        (( _argv_split == 1 )) && err 1 "illegal argument: ${ARGV[0]}"
        consume_argv PATTERNS ARGV
        ;;
    esac
  done
}

function parse_file() {
  typeset -n lines=$1 
  typeset file="$2" fmt="${3:-%s}"

  while read; do
    [[ -z $REPLY || $REPLY =~ ^[[:blank:]]*# ]] && continue
    lines+=("`printf -- "$fmt" "$REPLY"`")
  done < "$file"
}

function try_default_editor() {
  typeset -n editor=$1
  dep_any editor nvim vim vi
  log info "using default editor: $editor"
}

function try_default_fuzzy() {
  typeset -n fuzzy=$1
  dep_any fuzzy fzf fzy zf
  log info "using default fuzzy finder: $fuzzy"
}

function try_default_fuzzy_opts() {
  typeset -n opts=$1
  typeset fuzzy=$2

  case $fuzzy in
    fzf) opts='-i -e --tiebreak=begin --reverse --prompt= --height=10 --no-color --no-info' ;;
    fzy) opts='--lines=10 --prompt=' ;;
    zf)  opts='--lines 10' ;;
  esac
}

function find_matches() {
  typeset -n out=$1
  typeset -a matches=()

  # subshell with direct assignment breaks space-separated filenames
  while read; do
    matches+=("$REPLY")
  done < <(eval ${CFG[fdcmd]} -- "$2" "${CFG[cwd]}")

  # emulates fzf's `-1` behaviour for all finders
  if (( ${#matches[@]} == 0 )); then
    log warn "no match found: $2"
  elif (( ${#matches[@]} == 1 )); then
    out+=("${matches[0]}")
  else
    choice=`printf '%s\n' "${matches[@]}" | "$NFF_FUZZY" $NFF_FUZZY_OPTS`
    retval=$?

    if (( $retval > 0 )); then
      ( [[ $NFF_FUZZY == fzf ]] && (( $retval == 130 )) ) \
        || (( $retval == 1 )) && err 130 'interrupt'
      err 7 "fuzzy finder returned non-zero exit code: $retval"
    fi

    contains out "$choice" || out+=("$choice")
  fi
}

# ------------------------------------------------------------------------------

typeset NFF_EDITOR NFF_FUZZY NFF_FUZZY_OPTS
typeset -a EXCLUDES=() PATTERNS=() FILES=()
typeset -i _argv_split=0
typeset -A CFG=(
  [cwd]="$PWD"
  [ignore]=1
  [hidden]=1
  [symlink]=1
  [maxdepth]=10
)

# FIX: argument parsing may fail before errors from missing dependencies
parse_cmdline "$@"

dep_all fd

[[ -z $NFF_EDITOR ]]     && try_default_editor NFF_EDITOR
[[ -z $NFF_FUZZY ]]      && try_default_fuzzy NFF_FUZZY
[[ -z $NFF_FUZZY_OPTS ]] && try_default_fuzzy_opts NFF_FUZZY_OPTS $NFF_FUZZY

ensure_version fd "$NFF_FUZZY"

# ------------------------------------------------------------------------------

[[ -f ${0%/*}/exclude.nff ]] \
  && parse_file EXCLUDES "${0%/*}/exclude.nff" "-E '%s'"

printf -v CFG[fdcmd] 'fd -tf -d%d -p %s %s %s %s' \
  ${CFG[maxdepth]} \
  `(( ${CFG[hidden]} == 1 ))  && printf -- '-H'` \
  `(( ${CFG[symlink]} == 1 )) && printf -- '-L'` \
  `(( ${CFG[ignore]} == 0 ))  && printf -- '-I'` \
  "`IFS=' ' printf '%s' "${EXCLUDES[*]}"`"

(( ${#PATTERNS[@]} == 0 )) && PATTERNS=(.)
filter_uniq PATTERNS

for p in "${PATTERNS[@]}"; do
  find_matches FILES "$p"
done
filter_uniq FILES

if (( ${#FILES[@]} > 0 )); then
  $NFF_EDITOR "${FILES[@]// /\ }"
else
   log info 'nothing to edit'
   exit 4
fi
